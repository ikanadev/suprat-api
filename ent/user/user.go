// Code generated by entc, DO NOT EDIT.

package user

import (
	"time"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"

	// EdgeMeasurements holds the string denoting the measurements edge name in mutations.
	EdgeMeasurements = "measurements"
	// EdgeActivities holds the string denoting the activities edge name in mutations.
	EdgeActivities = "activities"

	// Table holds the table name of the user in the database.
	Table = "users"
	// MeasurementsTable is the table the holds the measurements relation/edge.
	MeasurementsTable = "measurements"
	// MeasurementsInverseTable is the table name for the Measurement entity.
	// It exists in this package in order to avoid circular dependency with the "measurement" package.
	MeasurementsInverseTable = "measurements"
	// MeasurementsColumn is the table column denoting the measurements relation/edge.
	MeasurementsColumn = "user_measurements"
	// ActivitiesTable is the table the holds the activities relation/edge.
	ActivitiesTable = "activities"
	// ActivitiesInverseTable is the table name for the Activity entity.
	// It exists in this package in order to avoid circular dependency with the "activity" package.
	ActivitiesInverseTable = "activities"
	// ActivitiesColumn is the table column denoting the activities relation/edge.
	ActivitiesColumn = "user_activities"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldLastName,
	FieldEmail,
	FieldPassword,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the created_at field.
	DefaultCreatedAt func() time.Time
)
