// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/vmkevv/suprat-api/ent/activity"
	"github.com/vmkevv/suprat-api/ent/color"
	"github.com/vmkevv/suprat-api/ent/measure"
	"github.com/vmkevv/suprat-api/ent/measurement"
	"github.com/vmkevv/suprat-api/ent/user"
)

// MeasurementCreate is the builder for creating a Measurement entity.
type MeasurementCreate struct {
	config
	mutation *MeasurementMutation
	hooks    []Hook
}

// SetName sets the name field.
func (mc *MeasurementCreate) SetName(s string) *MeasurementCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetEnabled sets the enabled field.
func (mc *MeasurementCreate) SetEnabled(b bool) *MeasurementCreate {
	mc.mutation.SetEnabled(b)
	return mc
}

// SetNillableEnabled sets the enabled field if the given value is not nil.
func (mc *MeasurementCreate) SetNillableEnabled(b *bool) *MeasurementCreate {
	if b != nil {
		mc.SetEnabled(*b)
	}
	return mc
}

// SetCreatedAt sets the created_at field.
func (mc *MeasurementCreate) SetCreatedAt(t time.Time) *MeasurementCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (mc *MeasurementCreate) SetNillableCreatedAt(t *time.Time) *MeasurementCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetUserID sets the user edge to User by id.
func (mc *MeasurementCreate) SetUserID(id int) *MeasurementCreate {
	mc.mutation.SetUserID(id)
	return mc
}

// SetUser sets the user edge to User.
func (mc *MeasurementCreate) SetUser(u *User) *MeasurementCreate {
	return mc.SetUserID(u.ID)
}

// SetColorID sets the color edge to Color by id.
func (mc *MeasurementCreate) SetColorID(id int) *MeasurementCreate {
	mc.mutation.SetColorID(id)
	return mc
}

// SetColor sets the color edge to Color.
func (mc *MeasurementCreate) SetColor(c *Color) *MeasurementCreate {
	return mc.SetColorID(c.ID)
}

// AddActivityIDs adds the activities edge to Activity by ids.
func (mc *MeasurementCreate) AddActivityIDs(ids ...int) *MeasurementCreate {
	mc.mutation.AddActivityIDs(ids...)
	return mc
}

// AddActivities adds the activities edges to Activity.
func (mc *MeasurementCreate) AddActivities(a ...*Activity) *MeasurementCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mc.AddActivityIDs(ids...)
}

// AddMeasureIDs adds the measures edge to Measure by ids.
func (mc *MeasurementCreate) AddMeasureIDs(ids ...int) *MeasurementCreate {
	mc.mutation.AddMeasureIDs(ids...)
	return mc
}

// AddMeasures adds the measures edges to Measure.
func (mc *MeasurementCreate) AddMeasures(m ...*Measure) *MeasurementCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddMeasureIDs(ids...)
}

// Mutation returns the MeasurementMutation object of the builder.
func (mc *MeasurementCreate) Mutation() *MeasurementMutation {
	return mc.mutation
}

// Save creates the Measurement in the database.
func (mc *MeasurementCreate) Save(ctx context.Context) (*Measurement, error) {
	var (
		err  error
		node *Measurement
	)
	mc.defaults()
	if len(mc.hooks) == 0 {
		if err = mc.check(); err != nil {
			return nil, err
		}
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MeasurementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mc.check(); err != nil {
				return nil, err
			}
			mc.mutation = mutation
			node, err = mc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			mut = mc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MeasurementCreate) SaveX(ctx context.Context) *Measurement {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (mc *MeasurementCreate) defaults() {
	if _, ok := mc.mutation.Enabled(); !ok {
		v := measurement.DefaultEnabled
		mc.mutation.SetEnabled(v)
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := measurement.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MeasurementCreate) check() error {
	if _, ok := mc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := mc.mutation.Enabled(); !ok {
		return &ValidationError{Name: "enabled", err: errors.New("ent: missing required field \"enabled\"")}
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := mc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New("ent: missing required edge \"user\"")}
	}
	if _, ok := mc.mutation.ColorID(); !ok {
		return &ValidationError{Name: "color", err: errors.New("ent: missing required edge \"color\"")}
	}
	return nil
}

func (mc *MeasurementCreate) sqlSave(ctx context.Context) (*Measurement, error) {
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (mc *MeasurementCreate) createSpec() (*Measurement, *sqlgraph.CreateSpec) {
	var (
		_node = &Measurement{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: measurement.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: measurement.FieldID,
			},
		}
	)
	if value, ok := mc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: measurement.FieldName,
		})
		_node.Name = value
	}
	if value, ok := mc.mutation.Enabled(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: measurement.FieldEnabled,
		})
		_node.Enabled = value
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: measurement.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if nodes := mc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   measurement.UserTable,
			Columns: []string{measurement.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.ColorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   measurement.ColorTable,
			Columns: []string{measurement.ColorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: color.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   measurement.ActivitiesTable,
			Columns: measurement.ActivitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.MeasuresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   measurement.MeasuresTable,
			Columns: []string{measurement.MeasuresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: measure.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MeasurementCreateBulk is the builder for creating a bulk of Measurement entities.
type MeasurementCreateBulk struct {
	config
	builders []*MeasurementCreate
}

// Save creates the Measurement entities in the database.
func (mcb *MeasurementCreateBulk) Save(ctx context.Context) ([]*Measurement, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Measurement, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MeasurementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (mcb *MeasurementCreateBulk) SaveX(ctx context.Context) []*Measurement {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
