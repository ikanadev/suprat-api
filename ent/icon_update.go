// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/vmkevv/suprat-api/ent/activity"
	"github.com/vmkevv/suprat-api/ent/icon"
	"github.com/vmkevv/suprat-api/ent/predicate"
)

// IconUpdate is the builder for updating Icon entities.
type IconUpdate struct {
	config
	hooks    []Hook
	mutation *IconMutation
}

// Where adds a new predicate for the builder.
func (iu *IconUpdate) Where(ps ...predicate.Icon) *IconUpdate {
	iu.mutation.predicates = append(iu.mutation.predicates, ps...)
	return iu
}

// SetName sets the name field.
func (iu *IconUpdate) SetName(s string) *IconUpdate {
	iu.mutation.SetName(s)
	return iu
}

// AddActivityIDs adds the activities edge to Activity by ids.
func (iu *IconUpdate) AddActivityIDs(ids ...int) *IconUpdate {
	iu.mutation.AddActivityIDs(ids...)
	return iu
}

// AddActivities adds the activities edges to Activity.
func (iu *IconUpdate) AddActivities(a ...*Activity) *IconUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return iu.AddActivityIDs(ids...)
}

// Mutation returns the IconMutation object of the builder.
func (iu *IconUpdate) Mutation() *IconMutation {
	return iu.mutation
}

// ClearActivities clears all "activities" edges to type Activity.
func (iu *IconUpdate) ClearActivities() *IconUpdate {
	iu.mutation.ClearActivities()
	return iu
}

// RemoveActivityIDs removes the activities edge to Activity by ids.
func (iu *IconUpdate) RemoveActivityIDs(ids ...int) *IconUpdate {
	iu.mutation.RemoveActivityIDs(ids...)
	return iu
}

// RemoveActivities removes activities edges to Activity.
func (iu *IconUpdate) RemoveActivities(a ...*Activity) *IconUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return iu.RemoveActivityIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *IconUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(iu.hooks) == 0 {
		affected, err = iu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IconMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iu.mutation = mutation
			affected, err = iu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iu.hooks) - 1; i >= 0; i-- {
			mut = iu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iu *IconUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *IconUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *IconUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iu *IconUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   icon.Table,
			Columns: icon.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: icon.FieldID,
			},
		},
	}
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: icon.FieldName,
		})
	}
	if iu.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   icon.ActivitiesTable,
			Columns: []string{icon.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedActivitiesIDs(); len(nodes) > 0 && !iu.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   icon.ActivitiesTable,
			Columns: []string{icon.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   icon.ActivitiesTable,
			Columns: []string{icon.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{icon.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// IconUpdateOne is the builder for updating a single Icon entity.
type IconUpdateOne struct {
	config
	hooks    []Hook
	mutation *IconMutation
}

// SetName sets the name field.
func (iuo *IconUpdateOne) SetName(s string) *IconUpdateOne {
	iuo.mutation.SetName(s)
	return iuo
}

// AddActivityIDs adds the activities edge to Activity by ids.
func (iuo *IconUpdateOne) AddActivityIDs(ids ...int) *IconUpdateOne {
	iuo.mutation.AddActivityIDs(ids...)
	return iuo
}

// AddActivities adds the activities edges to Activity.
func (iuo *IconUpdateOne) AddActivities(a ...*Activity) *IconUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return iuo.AddActivityIDs(ids...)
}

// Mutation returns the IconMutation object of the builder.
func (iuo *IconUpdateOne) Mutation() *IconMutation {
	return iuo.mutation
}

// ClearActivities clears all "activities" edges to type Activity.
func (iuo *IconUpdateOne) ClearActivities() *IconUpdateOne {
	iuo.mutation.ClearActivities()
	return iuo
}

// RemoveActivityIDs removes the activities edge to Activity by ids.
func (iuo *IconUpdateOne) RemoveActivityIDs(ids ...int) *IconUpdateOne {
	iuo.mutation.RemoveActivityIDs(ids...)
	return iuo
}

// RemoveActivities removes activities edges to Activity.
func (iuo *IconUpdateOne) RemoveActivities(a ...*Activity) *IconUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return iuo.RemoveActivityIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (iuo *IconUpdateOne) Save(ctx context.Context) (*Icon, error) {
	var (
		err  error
		node *Icon
	)
	if len(iuo.hooks) == 0 {
		node, err = iuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IconMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iuo.mutation = mutation
			node, err = iuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iuo.hooks) - 1; i >= 0; i-- {
			mut = iuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *IconUpdateOne) SaveX(ctx context.Context) *Icon {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *IconUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *IconUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iuo *IconUpdateOne) sqlSave(ctx context.Context) (_node *Icon, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   icon.Table,
			Columns: icon.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: icon.FieldID,
			},
		},
	}
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Icon.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := iuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: icon.FieldName,
		})
	}
	if iuo.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   icon.ActivitiesTable,
			Columns: []string{icon.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedActivitiesIDs(); len(nodes) > 0 && !iuo.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   icon.ActivitiesTable,
			Columns: []string{icon.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   icon.ActivitiesTable,
			Columns: []string{icon.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Icon{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{icon.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
