// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/vmkevv/suprat-api/ent/icon"
)

// Icon is the model entity for the Icon schema.
type Icon struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IconQuery when eager-loading is set.
	Edges IconEdges `json:"edges"`
}

// IconEdges holds the relations/edges for other nodes in the graph.
type IconEdges struct {
	// Activities holds the value of the activities edge.
	Activities []*Activity
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ActivitiesOrErr returns the Activities value or an error if the edge
// was not loaded in eager-loading.
func (e IconEdges) ActivitiesOrErr() ([]*Activity, error) {
	if e.loadedTypes[0] {
		return e.Activities, nil
	}
	return nil, &NotLoadedError{edge: "activities"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Icon) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Icon fields.
func (i *Icon) assignValues(values ...interface{}) error {
	if m, n := len(values), len(icon.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	i.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		i.Name = value.String
	}
	return nil
}

// QueryActivities queries the activities edge of the Icon.
func (i *Icon) QueryActivities() *ActivityQuery {
	return (&IconClient{config: i.config}).QueryActivities(i)
}

// Update returns a builder for updating this Icon.
// Note that, you need to call Icon.Unwrap() before calling this method, if this Icon
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Icon) Update() *IconUpdateOne {
	return (&IconClient{config: i.config}).UpdateOne(i)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (i *Icon) Unwrap() *Icon {
	tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Icon is not a transactional entity")
	}
	i.config.driver = tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Icon) String() string {
	var builder strings.Builder
	builder.WriteString("Icon(")
	builder.WriteString(fmt.Sprintf("id=%v", i.ID))
	builder.WriteString(", name=")
	builder.WriteString(i.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Icons is a parsable slice of Icon.
type Icons []*Icon

func (i Icons) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
