// Code generated by entc, DO NOT EDIT.

package measurement

import (
	"time"
)

const (
	// Label holds the string label denoting the measurement type in the database.
	Label = "measurement"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEnabled holds the string denoting the enabled field in the database.
	FieldEnabled = "enabled"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"

	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeColor holds the string denoting the color edge name in mutations.
	EdgeColor = "color"
	// EdgeActivities holds the string denoting the activities edge name in mutations.
	EdgeActivities = "activities"
	// EdgeMeasures holds the string denoting the measures edge name in mutations.
	EdgeMeasures = "measures"

	// Table holds the table name of the measurement in the database.
	Table = "measurements"
	// UserTable is the table the holds the user relation/edge.
	UserTable = "measurements"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_measurements"
	// ColorTable is the table the holds the color relation/edge.
	ColorTable = "measurements"
	// ColorInverseTable is the table name for the Color entity.
	// It exists in this package in order to avoid circular dependency with the "color" package.
	ColorInverseTable = "colors"
	// ColorColumn is the table column denoting the color relation/edge.
	ColorColumn = "color_measurements"
	// ActivitiesTable is the table the holds the activities relation/edge. The primary key declared below.
	ActivitiesTable = "activity_measurements"
	// ActivitiesInverseTable is the table name for the Activity entity.
	// It exists in this package in order to avoid circular dependency with the "activity" package.
	ActivitiesInverseTable = "activities"
	// MeasuresTable is the table the holds the measures relation/edge.
	MeasuresTable = "measures"
	// MeasuresInverseTable is the table name for the Measure entity.
	// It exists in this package in order to avoid circular dependency with the "measure" package.
	MeasuresInverseTable = "measures"
	// MeasuresColumn is the table column denoting the measures relation/edge.
	MeasuresColumn = "measurement_measures"
)

// Columns holds all SQL columns for measurement fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldEnabled,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Measurement type.
var ForeignKeys = []string{
	"color_measurements",
	"user_measurements",
}

var (
	// ActivitiesPrimaryKey and ActivitiesColumn2 are the table columns denoting the
	// primary key for the activities relation (M2M).
	ActivitiesPrimaryKey = []string{"activity_id", "measurement_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEnabled holds the default value on creation for the enabled field.
	DefaultEnabled bool
	// DefaultCreatedAt holds the default value on creation for the created_at field.
	DefaultCreatedAt func() time.Time
)
