// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/vmkevv/suprat-api/ent/activity"
	"github.com/vmkevv/suprat-api/ent/color"
	"github.com/vmkevv/suprat-api/ent/measurement"
	"github.com/vmkevv/suprat-api/ent/predicate"
)

// ColorUpdate is the builder for updating Color entities.
type ColorUpdate struct {
	config
	hooks    []Hook
	mutation *ColorMutation
}

// Where adds a new predicate for the builder.
func (cu *ColorUpdate) Where(ps ...predicate.Color) *ColorUpdate {
	cu.mutation.predicates = append(cu.mutation.predicates, ps...)
	return cu
}

// SetName sets the name field.
func (cu *ColorUpdate) SetName(s string) *ColorUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetRgb sets the rgb field.
func (cu *ColorUpdate) SetRgb(s string) *ColorUpdate {
	cu.mutation.SetRgb(s)
	return cu
}

// AddActivityIDs adds the activities edge to Activity by ids.
func (cu *ColorUpdate) AddActivityIDs(ids ...int) *ColorUpdate {
	cu.mutation.AddActivityIDs(ids...)
	return cu
}

// AddActivities adds the activities edges to Activity.
func (cu *ColorUpdate) AddActivities(a ...*Activity) *ColorUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.AddActivityIDs(ids...)
}

// AddMeasurementIDs adds the measurements edge to Measurement by ids.
func (cu *ColorUpdate) AddMeasurementIDs(ids ...int) *ColorUpdate {
	cu.mutation.AddMeasurementIDs(ids...)
	return cu
}

// AddMeasurements adds the measurements edges to Measurement.
func (cu *ColorUpdate) AddMeasurements(m ...*Measurement) *ColorUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cu.AddMeasurementIDs(ids...)
}

// Mutation returns the ColorMutation object of the builder.
func (cu *ColorUpdate) Mutation() *ColorMutation {
	return cu.mutation
}

// ClearActivities clears all "activities" edges to type Activity.
func (cu *ColorUpdate) ClearActivities() *ColorUpdate {
	cu.mutation.ClearActivities()
	return cu
}

// RemoveActivityIDs removes the activities edge to Activity by ids.
func (cu *ColorUpdate) RemoveActivityIDs(ids ...int) *ColorUpdate {
	cu.mutation.RemoveActivityIDs(ids...)
	return cu
}

// RemoveActivities removes activities edges to Activity.
func (cu *ColorUpdate) RemoveActivities(a ...*Activity) *ColorUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.RemoveActivityIDs(ids...)
}

// ClearMeasurements clears all "measurements" edges to type Measurement.
func (cu *ColorUpdate) ClearMeasurements() *ColorUpdate {
	cu.mutation.ClearMeasurements()
	return cu
}

// RemoveMeasurementIDs removes the measurements edge to Measurement by ids.
func (cu *ColorUpdate) RemoveMeasurementIDs(ids ...int) *ColorUpdate {
	cu.mutation.RemoveMeasurementIDs(ids...)
	return cu
}

// RemoveMeasurements removes measurements edges to Measurement.
func (cu *ColorUpdate) RemoveMeasurements(m ...*Measurement) *ColorUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cu.RemoveMeasurementIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ColorUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ColorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ColorUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ColorUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ColorUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *ColorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   color.Table,
			Columns: color.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: color.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: color.FieldName,
		})
	}
	if value, ok := cu.mutation.Rgb(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: color.FieldRgb,
		})
	}
	if cu.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.ActivitiesTable,
			Columns: []string{color.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedActivitiesIDs(); len(nodes) > 0 && !cu.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.ActivitiesTable,
			Columns: []string{color.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.ActivitiesTable,
			Columns: []string{color.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.MeasurementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.MeasurementsTable,
			Columns: []string{color.MeasurementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: measurement.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedMeasurementsIDs(); len(nodes) > 0 && !cu.mutation.MeasurementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.MeasurementsTable,
			Columns: []string{color.MeasurementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: measurement.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.MeasurementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.MeasurementsTable,
			Columns: []string{color.MeasurementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: measurement.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{color.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ColorUpdateOne is the builder for updating a single Color entity.
type ColorUpdateOne struct {
	config
	hooks    []Hook
	mutation *ColorMutation
}

// SetName sets the name field.
func (cuo *ColorUpdateOne) SetName(s string) *ColorUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetRgb sets the rgb field.
func (cuo *ColorUpdateOne) SetRgb(s string) *ColorUpdateOne {
	cuo.mutation.SetRgb(s)
	return cuo
}

// AddActivityIDs adds the activities edge to Activity by ids.
func (cuo *ColorUpdateOne) AddActivityIDs(ids ...int) *ColorUpdateOne {
	cuo.mutation.AddActivityIDs(ids...)
	return cuo
}

// AddActivities adds the activities edges to Activity.
func (cuo *ColorUpdateOne) AddActivities(a ...*Activity) *ColorUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.AddActivityIDs(ids...)
}

// AddMeasurementIDs adds the measurements edge to Measurement by ids.
func (cuo *ColorUpdateOne) AddMeasurementIDs(ids ...int) *ColorUpdateOne {
	cuo.mutation.AddMeasurementIDs(ids...)
	return cuo
}

// AddMeasurements adds the measurements edges to Measurement.
func (cuo *ColorUpdateOne) AddMeasurements(m ...*Measurement) *ColorUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cuo.AddMeasurementIDs(ids...)
}

// Mutation returns the ColorMutation object of the builder.
func (cuo *ColorUpdateOne) Mutation() *ColorMutation {
	return cuo.mutation
}

// ClearActivities clears all "activities" edges to type Activity.
func (cuo *ColorUpdateOne) ClearActivities() *ColorUpdateOne {
	cuo.mutation.ClearActivities()
	return cuo
}

// RemoveActivityIDs removes the activities edge to Activity by ids.
func (cuo *ColorUpdateOne) RemoveActivityIDs(ids ...int) *ColorUpdateOne {
	cuo.mutation.RemoveActivityIDs(ids...)
	return cuo
}

// RemoveActivities removes activities edges to Activity.
func (cuo *ColorUpdateOne) RemoveActivities(a ...*Activity) *ColorUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.RemoveActivityIDs(ids...)
}

// ClearMeasurements clears all "measurements" edges to type Measurement.
func (cuo *ColorUpdateOne) ClearMeasurements() *ColorUpdateOne {
	cuo.mutation.ClearMeasurements()
	return cuo
}

// RemoveMeasurementIDs removes the measurements edge to Measurement by ids.
func (cuo *ColorUpdateOne) RemoveMeasurementIDs(ids ...int) *ColorUpdateOne {
	cuo.mutation.RemoveMeasurementIDs(ids...)
	return cuo
}

// RemoveMeasurements removes measurements edges to Measurement.
func (cuo *ColorUpdateOne) RemoveMeasurements(m ...*Measurement) *ColorUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cuo.RemoveMeasurementIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (cuo *ColorUpdateOne) Save(ctx context.Context) (*Color, error) {
	var (
		err  error
		node *Color
	)
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ColorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ColorUpdateOne) SaveX(ctx context.Context) *Color {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ColorUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ColorUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *ColorUpdateOne) sqlSave(ctx context.Context) (_node *Color, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   color.Table,
			Columns: color.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: color.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Color.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := cuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: color.FieldName,
		})
	}
	if value, ok := cuo.mutation.Rgb(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: color.FieldRgb,
		})
	}
	if cuo.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.ActivitiesTable,
			Columns: []string{color.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedActivitiesIDs(); len(nodes) > 0 && !cuo.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.ActivitiesTable,
			Columns: []string{color.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.ActivitiesTable,
			Columns: []string{color.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.MeasurementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.MeasurementsTable,
			Columns: []string{color.MeasurementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: measurement.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedMeasurementsIDs(); len(nodes) > 0 && !cuo.mutation.MeasurementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.MeasurementsTable,
			Columns: []string{color.MeasurementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: measurement.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.MeasurementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.MeasurementsTable,
			Columns: []string{color.MeasurementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: measurement.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Color{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{color.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
