// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/vmkevv/suprat-api/ent/activity"
	"github.com/vmkevv/suprat-api/ent/color"
	"github.com/vmkevv/suprat-api/ent/icon"
	"github.com/vmkevv/suprat-api/ent/measure"
	"github.com/vmkevv/suprat-api/ent/measurement"
	"github.com/vmkevv/suprat-api/ent/predicate"
	"github.com/vmkevv/suprat-api/ent/record"
	"github.com/vmkevv/suprat-api/ent/user"

	"github.com/facebook/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeActivity    = "Activity"
	TypeColor       = "Color"
	TypeIcon        = "Icon"
	TypeMeasure     = "Measure"
	TypeMeasurement = "Measurement"
	TypeRecord      = "Record"
	TypeUser        = "User"
)

// ActivityMutation represents an operation that mutate the Activities
// nodes in the graph.
type ActivityMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	name                *string
	created_at          *time.Time
	clearedFields       map[string]struct{}
	user                *int
	cleareduser         bool
	color               *int
	clearedcolor        bool
	icon                *int
	clearedicon         bool
	records             map[int]struct{}
	removedrecords      map[int]struct{}
	clearedrecords      bool
	measurements        map[int]struct{}
	removedmeasurements map[int]struct{}
	clearedmeasurements bool
	done                bool
	oldValue            func(context.Context) (*Activity, error)
	predicates          []predicate.Activity
}

var _ ent.Mutation = (*ActivityMutation)(nil)

// activityOption allows to manage the mutation configuration using functional options.
type activityOption func(*ActivityMutation)

// newActivityMutation creates new mutation for Activity.
func newActivityMutation(c config, op Op, opts ...activityOption) *ActivityMutation {
	m := &ActivityMutation{
		config:        c,
		op:            op,
		typ:           TypeActivity,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withActivityID sets the id field of the mutation.
func withActivityID(id int) activityOption {
	return func(m *ActivityMutation) {
		var (
			err   error
			once  sync.Once
			value *Activity
		)
		m.oldValue = func(ctx context.Context) (*Activity, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Activity.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withActivity sets the old Activity of the mutation.
func withActivity(node *Activity) activityOption {
	return func(m *ActivityMutation) {
		m.oldValue = func(context.Context) (*Activity, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ActivityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ActivityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ActivityMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *ActivityMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *ActivityMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Activity.
// If the Activity object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ActivityMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *ActivityMutation) ResetName() {
	m.name = nil
}

// SetCreatedAt sets the created_at field.
func (m *ActivityMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the created_at value in the mutation.
func (m *ActivityMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old created_at value of the Activity.
// If the Activity object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ActivityMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt reset all changes of the "created_at" field.
func (m *ActivityMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUserID sets the user edge to User by id.
func (m *ActivityMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the user edge to User.
func (m *ActivityMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the edge user was cleared.
func (m *ActivityMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the user id in the mutation.
func (m *ActivityMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the user ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ActivityMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser reset all changes of the "user" edge.
func (m *ActivityMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetColorID sets the color edge to Color by id.
func (m *ActivityMutation) SetColorID(id int) {
	m.color = &id
}

// ClearColor clears the color edge to Color.
func (m *ActivityMutation) ClearColor() {
	m.clearedcolor = true
}

// ColorCleared returns if the edge color was cleared.
func (m *ActivityMutation) ColorCleared() bool {
	return m.clearedcolor
}

// ColorID returns the color id in the mutation.
func (m *ActivityMutation) ColorID() (id int, exists bool) {
	if m.color != nil {
		return *m.color, true
	}
	return
}

// ColorIDs returns the color ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// ColorID instead. It exists only for internal usage by the builders.
func (m *ActivityMutation) ColorIDs() (ids []int) {
	if id := m.color; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetColor reset all changes of the "color" edge.
func (m *ActivityMutation) ResetColor() {
	m.color = nil
	m.clearedcolor = false
}

// SetIconID sets the icon edge to Icon by id.
func (m *ActivityMutation) SetIconID(id int) {
	m.icon = &id
}

// ClearIcon clears the icon edge to Icon.
func (m *ActivityMutation) ClearIcon() {
	m.clearedicon = true
}

// IconCleared returns if the edge icon was cleared.
func (m *ActivityMutation) IconCleared() bool {
	return m.clearedicon
}

// IconID returns the icon id in the mutation.
func (m *ActivityMutation) IconID() (id int, exists bool) {
	if m.icon != nil {
		return *m.icon, true
	}
	return
}

// IconIDs returns the icon ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// IconID instead. It exists only for internal usage by the builders.
func (m *ActivityMutation) IconIDs() (ids []int) {
	if id := m.icon; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetIcon reset all changes of the "icon" edge.
func (m *ActivityMutation) ResetIcon() {
	m.icon = nil
	m.clearedicon = false
}

// AddRecordIDs adds the records edge to Record by ids.
func (m *ActivityMutation) AddRecordIDs(ids ...int) {
	if m.records == nil {
		m.records = make(map[int]struct{})
	}
	for i := range ids {
		m.records[ids[i]] = struct{}{}
	}
}

// ClearRecords clears the records edge to Record.
func (m *ActivityMutation) ClearRecords() {
	m.clearedrecords = true
}

// RecordsCleared returns if the edge records was cleared.
func (m *ActivityMutation) RecordsCleared() bool {
	return m.clearedrecords
}

// RemoveRecordIDs removes the records edge to Record by ids.
func (m *ActivityMutation) RemoveRecordIDs(ids ...int) {
	if m.removedrecords == nil {
		m.removedrecords = make(map[int]struct{})
	}
	for i := range ids {
		m.removedrecords[ids[i]] = struct{}{}
	}
}

// RemovedRecords returns the removed ids of records.
func (m *ActivityMutation) RemovedRecordsIDs() (ids []int) {
	for id := range m.removedrecords {
		ids = append(ids, id)
	}
	return
}

// RecordsIDs returns the records ids in the mutation.
func (m *ActivityMutation) RecordsIDs() (ids []int) {
	for id := range m.records {
		ids = append(ids, id)
	}
	return
}

// ResetRecords reset all changes of the "records" edge.
func (m *ActivityMutation) ResetRecords() {
	m.records = nil
	m.clearedrecords = false
	m.removedrecords = nil
}

// AddMeasurementIDs adds the measurements edge to Measurement by ids.
func (m *ActivityMutation) AddMeasurementIDs(ids ...int) {
	if m.measurements == nil {
		m.measurements = make(map[int]struct{})
	}
	for i := range ids {
		m.measurements[ids[i]] = struct{}{}
	}
}

// ClearMeasurements clears the measurements edge to Measurement.
func (m *ActivityMutation) ClearMeasurements() {
	m.clearedmeasurements = true
}

// MeasurementsCleared returns if the edge measurements was cleared.
func (m *ActivityMutation) MeasurementsCleared() bool {
	return m.clearedmeasurements
}

// RemoveMeasurementIDs removes the measurements edge to Measurement by ids.
func (m *ActivityMutation) RemoveMeasurementIDs(ids ...int) {
	if m.removedmeasurements == nil {
		m.removedmeasurements = make(map[int]struct{})
	}
	for i := range ids {
		m.removedmeasurements[ids[i]] = struct{}{}
	}
}

// RemovedMeasurements returns the removed ids of measurements.
func (m *ActivityMutation) RemovedMeasurementsIDs() (ids []int) {
	for id := range m.removedmeasurements {
		ids = append(ids, id)
	}
	return
}

// MeasurementsIDs returns the measurements ids in the mutation.
func (m *ActivityMutation) MeasurementsIDs() (ids []int) {
	for id := range m.measurements {
		ids = append(ids, id)
	}
	return
}

// ResetMeasurements reset all changes of the "measurements" edge.
func (m *ActivityMutation) ResetMeasurements() {
	m.measurements = nil
	m.clearedmeasurements = false
	m.removedmeasurements = nil
}

// Op returns the operation name.
func (m *ActivityMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Activity).
func (m *ActivityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ActivityMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, activity.FieldName)
	}
	if m.created_at != nil {
		fields = append(fields, activity.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ActivityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case activity.FieldName:
		return m.Name()
	case activity.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *ActivityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case activity.FieldName:
		return m.OldName(ctx)
	case activity.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Activity field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ActivityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case activity.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case activity.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Activity field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ActivityMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ActivityMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ActivityMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Activity numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ActivityMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ActivityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ActivityMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Activity nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ActivityMutation) ResetField(name string) error {
	switch name {
	case activity.FieldName:
		m.ResetName()
		return nil
	case activity.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Activity field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ActivityMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.user != nil {
		edges = append(edges, activity.EdgeUser)
	}
	if m.color != nil {
		edges = append(edges, activity.EdgeColor)
	}
	if m.icon != nil {
		edges = append(edges, activity.EdgeIcon)
	}
	if m.records != nil {
		edges = append(edges, activity.EdgeRecords)
	}
	if m.measurements != nil {
		edges = append(edges, activity.EdgeMeasurements)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ActivityMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case activity.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case activity.EdgeColor:
		if id := m.color; id != nil {
			return []ent.Value{*id}
		}
	case activity.EdgeIcon:
		if id := m.icon; id != nil {
			return []ent.Value{*id}
		}
	case activity.EdgeRecords:
		ids := make([]ent.Value, 0, len(m.records))
		for id := range m.records {
			ids = append(ids, id)
		}
		return ids
	case activity.EdgeMeasurements:
		ids := make([]ent.Value, 0, len(m.measurements))
		for id := range m.measurements {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ActivityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedrecords != nil {
		edges = append(edges, activity.EdgeRecords)
	}
	if m.removedmeasurements != nil {
		edges = append(edges, activity.EdgeMeasurements)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ActivityMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case activity.EdgeRecords:
		ids := make([]ent.Value, 0, len(m.removedrecords))
		for id := range m.removedrecords {
			ids = append(ids, id)
		}
		return ids
	case activity.EdgeMeasurements:
		ids := make([]ent.Value, 0, len(m.removedmeasurements))
		for id := range m.removedmeasurements {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ActivityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.cleareduser {
		edges = append(edges, activity.EdgeUser)
	}
	if m.clearedcolor {
		edges = append(edges, activity.EdgeColor)
	}
	if m.clearedicon {
		edges = append(edges, activity.EdgeIcon)
	}
	if m.clearedrecords {
		edges = append(edges, activity.EdgeRecords)
	}
	if m.clearedmeasurements {
		edges = append(edges, activity.EdgeMeasurements)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ActivityMutation) EdgeCleared(name string) bool {
	switch name {
	case activity.EdgeUser:
		return m.cleareduser
	case activity.EdgeColor:
		return m.clearedcolor
	case activity.EdgeIcon:
		return m.clearedicon
	case activity.EdgeRecords:
		return m.clearedrecords
	case activity.EdgeMeasurements:
		return m.clearedmeasurements
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ActivityMutation) ClearEdge(name string) error {
	switch name {
	case activity.EdgeUser:
		m.ClearUser()
		return nil
	case activity.EdgeColor:
		m.ClearColor()
		return nil
	case activity.EdgeIcon:
		m.ClearIcon()
		return nil
	}
	return fmt.Errorf("unknown Activity unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ActivityMutation) ResetEdge(name string) error {
	switch name {
	case activity.EdgeUser:
		m.ResetUser()
		return nil
	case activity.EdgeColor:
		m.ResetColor()
		return nil
	case activity.EdgeIcon:
		m.ResetIcon()
		return nil
	case activity.EdgeRecords:
		m.ResetRecords()
		return nil
	case activity.EdgeMeasurements:
		m.ResetMeasurements()
		return nil
	}
	return fmt.Errorf("unknown Activity edge %s", name)
}

// ColorMutation represents an operation that mutate the Colors
// nodes in the graph.
type ColorMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	name                *string
	rgb                 *string
	clearedFields       map[string]struct{}
	activities          map[int]struct{}
	removedactivities   map[int]struct{}
	clearedactivities   bool
	measurements        map[int]struct{}
	removedmeasurements map[int]struct{}
	clearedmeasurements bool
	done                bool
	oldValue            func(context.Context) (*Color, error)
	predicates          []predicate.Color
}

var _ ent.Mutation = (*ColorMutation)(nil)

// colorOption allows to manage the mutation configuration using functional options.
type colorOption func(*ColorMutation)

// newColorMutation creates new mutation for Color.
func newColorMutation(c config, op Op, opts ...colorOption) *ColorMutation {
	m := &ColorMutation{
		config:        c,
		op:            op,
		typ:           TypeColor,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withColorID sets the id field of the mutation.
func withColorID(id int) colorOption {
	return func(m *ColorMutation) {
		var (
			err   error
			once  sync.Once
			value *Color
		)
		m.oldValue = func(ctx context.Context) (*Color, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Color.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withColor sets the old Color of the mutation.
func withColor(node *Color) colorOption {
	return func(m *ColorMutation) {
		m.oldValue = func(context.Context) (*Color, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ColorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ColorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ColorMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *ColorMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *ColorMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Color.
// If the Color object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ColorMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *ColorMutation) ResetName() {
	m.name = nil
}

// SetRgb sets the rgb field.
func (m *ColorMutation) SetRgb(s string) {
	m.rgb = &s
}

// Rgb returns the rgb value in the mutation.
func (m *ColorMutation) Rgb() (r string, exists bool) {
	v := m.rgb
	if v == nil {
		return
	}
	return *v, true
}

// OldRgb returns the old rgb value of the Color.
// If the Color object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ColorMutation) OldRgb(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRgb is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRgb requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRgb: %w", err)
	}
	return oldValue.Rgb, nil
}

// ResetRgb reset all changes of the "rgb" field.
func (m *ColorMutation) ResetRgb() {
	m.rgb = nil
}

// AddActivityIDs adds the activities edge to Activity by ids.
func (m *ColorMutation) AddActivityIDs(ids ...int) {
	if m.activities == nil {
		m.activities = make(map[int]struct{})
	}
	for i := range ids {
		m.activities[ids[i]] = struct{}{}
	}
}

// ClearActivities clears the activities edge to Activity.
func (m *ColorMutation) ClearActivities() {
	m.clearedactivities = true
}

// ActivitiesCleared returns if the edge activities was cleared.
func (m *ColorMutation) ActivitiesCleared() bool {
	return m.clearedactivities
}

// RemoveActivityIDs removes the activities edge to Activity by ids.
func (m *ColorMutation) RemoveActivityIDs(ids ...int) {
	if m.removedactivities == nil {
		m.removedactivities = make(map[int]struct{})
	}
	for i := range ids {
		m.removedactivities[ids[i]] = struct{}{}
	}
}

// RemovedActivities returns the removed ids of activities.
func (m *ColorMutation) RemovedActivitiesIDs() (ids []int) {
	for id := range m.removedactivities {
		ids = append(ids, id)
	}
	return
}

// ActivitiesIDs returns the activities ids in the mutation.
func (m *ColorMutation) ActivitiesIDs() (ids []int) {
	for id := range m.activities {
		ids = append(ids, id)
	}
	return
}

// ResetActivities reset all changes of the "activities" edge.
func (m *ColorMutation) ResetActivities() {
	m.activities = nil
	m.clearedactivities = false
	m.removedactivities = nil
}

// AddMeasurementIDs adds the measurements edge to Measurement by ids.
func (m *ColorMutation) AddMeasurementIDs(ids ...int) {
	if m.measurements == nil {
		m.measurements = make(map[int]struct{})
	}
	for i := range ids {
		m.measurements[ids[i]] = struct{}{}
	}
}

// ClearMeasurements clears the measurements edge to Measurement.
func (m *ColorMutation) ClearMeasurements() {
	m.clearedmeasurements = true
}

// MeasurementsCleared returns if the edge measurements was cleared.
func (m *ColorMutation) MeasurementsCleared() bool {
	return m.clearedmeasurements
}

// RemoveMeasurementIDs removes the measurements edge to Measurement by ids.
func (m *ColorMutation) RemoveMeasurementIDs(ids ...int) {
	if m.removedmeasurements == nil {
		m.removedmeasurements = make(map[int]struct{})
	}
	for i := range ids {
		m.removedmeasurements[ids[i]] = struct{}{}
	}
}

// RemovedMeasurements returns the removed ids of measurements.
func (m *ColorMutation) RemovedMeasurementsIDs() (ids []int) {
	for id := range m.removedmeasurements {
		ids = append(ids, id)
	}
	return
}

// MeasurementsIDs returns the measurements ids in the mutation.
func (m *ColorMutation) MeasurementsIDs() (ids []int) {
	for id := range m.measurements {
		ids = append(ids, id)
	}
	return
}

// ResetMeasurements reset all changes of the "measurements" edge.
func (m *ColorMutation) ResetMeasurements() {
	m.measurements = nil
	m.clearedmeasurements = false
	m.removedmeasurements = nil
}

// Op returns the operation name.
func (m *ColorMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Color).
func (m *ColorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ColorMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, color.FieldName)
	}
	if m.rgb != nil {
		fields = append(fields, color.FieldRgb)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ColorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case color.FieldName:
		return m.Name()
	case color.FieldRgb:
		return m.Rgb()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *ColorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case color.FieldName:
		return m.OldName(ctx)
	case color.FieldRgb:
		return m.OldRgb(ctx)
	}
	return nil, fmt.Errorf("unknown Color field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ColorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case color.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case color.FieldRgb:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRgb(v)
		return nil
	}
	return fmt.Errorf("unknown Color field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ColorMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ColorMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ColorMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Color numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ColorMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ColorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ColorMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Color nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ColorMutation) ResetField(name string) error {
	switch name {
	case color.FieldName:
		m.ResetName()
		return nil
	case color.FieldRgb:
		m.ResetRgb()
		return nil
	}
	return fmt.Errorf("unknown Color field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ColorMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.activities != nil {
		edges = append(edges, color.EdgeActivities)
	}
	if m.measurements != nil {
		edges = append(edges, color.EdgeMeasurements)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ColorMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case color.EdgeActivities:
		ids := make([]ent.Value, 0, len(m.activities))
		for id := range m.activities {
			ids = append(ids, id)
		}
		return ids
	case color.EdgeMeasurements:
		ids := make([]ent.Value, 0, len(m.measurements))
		for id := range m.measurements {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ColorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedactivities != nil {
		edges = append(edges, color.EdgeActivities)
	}
	if m.removedmeasurements != nil {
		edges = append(edges, color.EdgeMeasurements)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ColorMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case color.EdgeActivities:
		ids := make([]ent.Value, 0, len(m.removedactivities))
		for id := range m.removedactivities {
			ids = append(ids, id)
		}
		return ids
	case color.EdgeMeasurements:
		ids := make([]ent.Value, 0, len(m.removedmeasurements))
		for id := range m.removedmeasurements {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ColorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedactivities {
		edges = append(edges, color.EdgeActivities)
	}
	if m.clearedmeasurements {
		edges = append(edges, color.EdgeMeasurements)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ColorMutation) EdgeCleared(name string) bool {
	switch name {
	case color.EdgeActivities:
		return m.clearedactivities
	case color.EdgeMeasurements:
		return m.clearedmeasurements
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ColorMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Color unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ColorMutation) ResetEdge(name string) error {
	switch name {
	case color.EdgeActivities:
		m.ResetActivities()
		return nil
	case color.EdgeMeasurements:
		m.ResetMeasurements()
		return nil
	}
	return fmt.Errorf("unknown Color edge %s", name)
}

// IconMutation represents an operation that mutate the Icons
// nodes in the graph.
type IconMutation struct {
	config
	op                Op
	typ               string
	id                *int
	name              *string
	clearedFields     map[string]struct{}
	activities        map[int]struct{}
	removedactivities map[int]struct{}
	clearedactivities bool
	done              bool
	oldValue          func(context.Context) (*Icon, error)
	predicates        []predicate.Icon
}

var _ ent.Mutation = (*IconMutation)(nil)

// iconOption allows to manage the mutation configuration using functional options.
type iconOption func(*IconMutation)

// newIconMutation creates new mutation for Icon.
func newIconMutation(c config, op Op, opts ...iconOption) *IconMutation {
	m := &IconMutation{
		config:        c,
		op:            op,
		typ:           TypeIcon,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withIconID sets the id field of the mutation.
func withIconID(id int) iconOption {
	return func(m *IconMutation) {
		var (
			err   error
			once  sync.Once
			value *Icon
		)
		m.oldValue = func(ctx context.Context) (*Icon, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Icon.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withIcon sets the old Icon of the mutation.
func withIcon(node *Icon) iconOption {
	return func(m *IconMutation) {
		m.oldValue = func(context.Context) (*Icon, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m IconMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m IconMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *IconMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *IconMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *IconMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Icon.
// If the Icon object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *IconMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *IconMutation) ResetName() {
	m.name = nil
}

// AddActivityIDs adds the activities edge to Activity by ids.
func (m *IconMutation) AddActivityIDs(ids ...int) {
	if m.activities == nil {
		m.activities = make(map[int]struct{})
	}
	for i := range ids {
		m.activities[ids[i]] = struct{}{}
	}
}

// ClearActivities clears the activities edge to Activity.
func (m *IconMutation) ClearActivities() {
	m.clearedactivities = true
}

// ActivitiesCleared returns if the edge activities was cleared.
func (m *IconMutation) ActivitiesCleared() bool {
	return m.clearedactivities
}

// RemoveActivityIDs removes the activities edge to Activity by ids.
func (m *IconMutation) RemoveActivityIDs(ids ...int) {
	if m.removedactivities == nil {
		m.removedactivities = make(map[int]struct{})
	}
	for i := range ids {
		m.removedactivities[ids[i]] = struct{}{}
	}
}

// RemovedActivities returns the removed ids of activities.
func (m *IconMutation) RemovedActivitiesIDs() (ids []int) {
	for id := range m.removedactivities {
		ids = append(ids, id)
	}
	return
}

// ActivitiesIDs returns the activities ids in the mutation.
func (m *IconMutation) ActivitiesIDs() (ids []int) {
	for id := range m.activities {
		ids = append(ids, id)
	}
	return
}

// ResetActivities reset all changes of the "activities" edge.
func (m *IconMutation) ResetActivities() {
	m.activities = nil
	m.clearedactivities = false
	m.removedactivities = nil
}

// Op returns the operation name.
func (m *IconMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Icon).
func (m *IconMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *IconMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, icon.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *IconMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case icon.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *IconMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case icon.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Icon field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *IconMutation) SetField(name string, value ent.Value) error {
	switch name {
	case icon.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Icon field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *IconMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *IconMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *IconMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Icon numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *IconMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *IconMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *IconMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Icon nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *IconMutation) ResetField(name string) error {
	switch name {
	case icon.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Icon field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *IconMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.activities != nil {
		edges = append(edges, icon.EdgeActivities)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *IconMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case icon.EdgeActivities:
		ids := make([]ent.Value, 0, len(m.activities))
		for id := range m.activities {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *IconMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedactivities != nil {
		edges = append(edges, icon.EdgeActivities)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *IconMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case icon.EdgeActivities:
		ids := make([]ent.Value, 0, len(m.removedactivities))
		for id := range m.removedactivities {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *IconMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedactivities {
		edges = append(edges, icon.EdgeActivities)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *IconMutation) EdgeCleared(name string) bool {
	switch name {
	case icon.EdgeActivities:
		return m.clearedactivities
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *IconMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Icon unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *IconMutation) ResetEdge(name string) error {
	switch name {
	case icon.EdgeActivities:
		m.ResetActivities()
		return nil
	}
	return fmt.Errorf("unknown Icon edge %s", name)
}

// MeasureMutation represents an operation that mutate the Measures
// nodes in the graph.
type MeasureMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	quantity           *int
	addquantity        *int
	clearedFields      map[string]struct{}
	record             *int
	clearedrecord      bool
	measurement        *int
	clearedmeasurement bool
	done               bool
	oldValue           func(context.Context) (*Measure, error)
	predicates         []predicate.Measure
}

var _ ent.Mutation = (*MeasureMutation)(nil)

// measureOption allows to manage the mutation configuration using functional options.
type measureOption func(*MeasureMutation)

// newMeasureMutation creates new mutation for Measure.
func newMeasureMutation(c config, op Op, opts ...measureOption) *MeasureMutation {
	m := &MeasureMutation{
		config:        c,
		op:            op,
		typ:           TypeMeasure,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMeasureID sets the id field of the mutation.
func withMeasureID(id int) measureOption {
	return func(m *MeasureMutation) {
		var (
			err   error
			once  sync.Once
			value *Measure
		)
		m.oldValue = func(ctx context.Context) (*Measure, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Measure.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMeasure sets the old Measure of the mutation.
func withMeasure(node *Measure) measureOption {
	return func(m *MeasureMutation) {
		m.oldValue = func(context.Context) (*Measure, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MeasureMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MeasureMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *MeasureMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetQuantity sets the quantity field.
func (m *MeasureMutation) SetQuantity(i int) {
	m.quantity = &i
	m.addquantity = nil
}

// Quantity returns the quantity value in the mutation.
func (m *MeasureMutation) Quantity() (r int, exists bool) {
	v := m.quantity
	if v == nil {
		return
	}
	return *v, true
}

// OldQuantity returns the old quantity value of the Measure.
// If the Measure object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *MeasureMutation) OldQuantity(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldQuantity is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldQuantity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuantity: %w", err)
	}
	return oldValue.Quantity, nil
}

// AddQuantity adds i to quantity.
func (m *MeasureMutation) AddQuantity(i int) {
	if m.addquantity != nil {
		*m.addquantity += i
	} else {
		m.addquantity = &i
	}
}

// AddedQuantity returns the value that was added to the quantity field in this mutation.
func (m *MeasureMutation) AddedQuantity() (r int, exists bool) {
	v := m.addquantity
	if v == nil {
		return
	}
	return *v, true
}

// ResetQuantity reset all changes of the "quantity" field.
func (m *MeasureMutation) ResetQuantity() {
	m.quantity = nil
	m.addquantity = nil
}

// SetRecordID sets the record edge to Record by id.
func (m *MeasureMutation) SetRecordID(id int) {
	m.record = &id
}

// ClearRecord clears the record edge to Record.
func (m *MeasureMutation) ClearRecord() {
	m.clearedrecord = true
}

// RecordCleared returns if the edge record was cleared.
func (m *MeasureMutation) RecordCleared() bool {
	return m.clearedrecord
}

// RecordID returns the record id in the mutation.
func (m *MeasureMutation) RecordID() (id int, exists bool) {
	if m.record != nil {
		return *m.record, true
	}
	return
}

// RecordIDs returns the record ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// RecordID instead. It exists only for internal usage by the builders.
func (m *MeasureMutation) RecordIDs() (ids []int) {
	if id := m.record; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRecord reset all changes of the "record" edge.
func (m *MeasureMutation) ResetRecord() {
	m.record = nil
	m.clearedrecord = false
}

// SetMeasurementID sets the measurement edge to Measurement by id.
func (m *MeasureMutation) SetMeasurementID(id int) {
	m.measurement = &id
}

// ClearMeasurement clears the measurement edge to Measurement.
func (m *MeasureMutation) ClearMeasurement() {
	m.clearedmeasurement = true
}

// MeasurementCleared returns if the edge measurement was cleared.
func (m *MeasureMutation) MeasurementCleared() bool {
	return m.clearedmeasurement
}

// MeasurementID returns the measurement id in the mutation.
func (m *MeasureMutation) MeasurementID() (id int, exists bool) {
	if m.measurement != nil {
		return *m.measurement, true
	}
	return
}

// MeasurementIDs returns the measurement ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// MeasurementID instead. It exists only for internal usage by the builders.
func (m *MeasureMutation) MeasurementIDs() (ids []int) {
	if id := m.measurement; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMeasurement reset all changes of the "measurement" edge.
func (m *MeasureMutation) ResetMeasurement() {
	m.measurement = nil
	m.clearedmeasurement = false
}

// Op returns the operation name.
func (m *MeasureMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Measure).
func (m *MeasureMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *MeasureMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.quantity != nil {
		fields = append(fields, measure.FieldQuantity)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *MeasureMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case measure.FieldQuantity:
		return m.Quantity()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *MeasureMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case measure.FieldQuantity:
		return m.OldQuantity(ctx)
	}
	return nil, fmt.Errorf("unknown Measure field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MeasureMutation) SetField(name string, value ent.Value) error {
	switch name {
	case measure.FieldQuantity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuantity(v)
		return nil
	}
	return fmt.Errorf("unknown Measure field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *MeasureMutation) AddedFields() []string {
	var fields []string
	if m.addquantity != nil {
		fields = append(fields, measure.FieldQuantity)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *MeasureMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case measure.FieldQuantity:
		return m.AddedQuantity()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MeasureMutation) AddField(name string, value ent.Value) error {
	switch name {
	case measure.FieldQuantity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQuantity(v)
		return nil
	}
	return fmt.Errorf("unknown Measure numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *MeasureMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *MeasureMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *MeasureMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Measure nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *MeasureMutation) ResetField(name string) error {
	switch name {
	case measure.FieldQuantity:
		m.ResetQuantity()
		return nil
	}
	return fmt.Errorf("unknown Measure field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *MeasureMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.record != nil {
		edges = append(edges, measure.EdgeRecord)
	}
	if m.measurement != nil {
		edges = append(edges, measure.EdgeMeasurement)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *MeasureMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case measure.EdgeRecord:
		if id := m.record; id != nil {
			return []ent.Value{*id}
		}
	case measure.EdgeMeasurement:
		if id := m.measurement; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *MeasureMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *MeasureMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *MeasureMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedrecord {
		edges = append(edges, measure.EdgeRecord)
	}
	if m.clearedmeasurement {
		edges = append(edges, measure.EdgeMeasurement)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *MeasureMutation) EdgeCleared(name string) bool {
	switch name {
	case measure.EdgeRecord:
		return m.clearedrecord
	case measure.EdgeMeasurement:
		return m.clearedmeasurement
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *MeasureMutation) ClearEdge(name string) error {
	switch name {
	case measure.EdgeRecord:
		m.ClearRecord()
		return nil
	case measure.EdgeMeasurement:
		m.ClearMeasurement()
		return nil
	}
	return fmt.Errorf("unknown Measure unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *MeasureMutation) ResetEdge(name string) error {
	switch name {
	case measure.EdgeRecord:
		m.ResetRecord()
		return nil
	case measure.EdgeMeasurement:
		m.ResetMeasurement()
		return nil
	}
	return fmt.Errorf("unknown Measure edge %s", name)
}

// MeasurementMutation represents an operation that mutate the Measurements
// nodes in the graph.
type MeasurementMutation struct {
	config
	op                Op
	typ               string
	id                *int
	name              *string
	enabled           *bool
	created_at        *time.Time
	clearedFields     map[string]struct{}
	user              *int
	cleareduser       bool
	color             *int
	clearedcolor      bool
	activities        map[int]struct{}
	removedactivities map[int]struct{}
	clearedactivities bool
	measures          map[int]struct{}
	removedmeasures   map[int]struct{}
	clearedmeasures   bool
	done              bool
	oldValue          func(context.Context) (*Measurement, error)
	predicates        []predicate.Measurement
}

var _ ent.Mutation = (*MeasurementMutation)(nil)

// measurementOption allows to manage the mutation configuration using functional options.
type measurementOption func(*MeasurementMutation)

// newMeasurementMutation creates new mutation for Measurement.
func newMeasurementMutation(c config, op Op, opts ...measurementOption) *MeasurementMutation {
	m := &MeasurementMutation{
		config:        c,
		op:            op,
		typ:           TypeMeasurement,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMeasurementID sets the id field of the mutation.
func withMeasurementID(id int) measurementOption {
	return func(m *MeasurementMutation) {
		var (
			err   error
			once  sync.Once
			value *Measurement
		)
		m.oldValue = func(ctx context.Context) (*Measurement, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Measurement.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMeasurement sets the old Measurement of the mutation.
func withMeasurement(node *Measurement) measurementOption {
	return func(m *MeasurementMutation) {
		m.oldValue = func(context.Context) (*Measurement, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MeasurementMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MeasurementMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *MeasurementMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *MeasurementMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *MeasurementMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Measurement.
// If the Measurement object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *MeasurementMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *MeasurementMutation) ResetName() {
	m.name = nil
}

// SetEnabled sets the enabled field.
func (m *MeasurementMutation) SetEnabled(b bool) {
	m.enabled = &b
}

// Enabled returns the enabled value in the mutation.
func (m *MeasurementMutation) Enabled() (r bool, exists bool) {
	v := m.enabled
	if v == nil {
		return
	}
	return *v, true
}

// OldEnabled returns the old enabled value of the Measurement.
// If the Measurement object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *MeasurementMutation) OldEnabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEnabled is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEnabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnabled: %w", err)
	}
	return oldValue.Enabled, nil
}

// ResetEnabled reset all changes of the "enabled" field.
func (m *MeasurementMutation) ResetEnabled() {
	m.enabled = nil
}

// SetCreatedAt sets the created_at field.
func (m *MeasurementMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the created_at value in the mutation.
func (m *MeasurementMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old created_at value of the Measurement.
// If the Measurement object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *MeasurementMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt reset all changes of the "created_at" field.
func (m *MeasurementMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUserID sets the user edge to User by id.
func (m *MeasurementMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the user edge to User.
func (m *MeasurementMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the edge user was cleared.
func (m *MeasurementMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the user id in the mutation.
func (m *MeasurementMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the user ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *MeasurementMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser reset all changes of the "user" edge.
func (m *MeasurementMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetColorID sets the color edge to Color by id.
func (m *MeasurementMutation) SetColorID(id int) {
	m.color = &id
}

// ClearColor clears the color edge to Color.
func (m *MeasurementMutation) ClearColor() {
	m.clearedcolor = true
}

// ColorCleared returns if the edge color was cleared.
func (m *MeasurementMutation) ColorCleared() bool {
	return m.clearedcolor
}

// ColorID returns the color id in the mutation.
func (m *MeasurementMutation) ColorID() (id int, exists bool) {
	if m.color != nil {
		return *m.color, true
	}
	return
}

// ColorIDs returns the color ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// ColorID instead. It exists only for internal usage by the builders.
func (m *MeasurementMutation) ColorIDs() (ids []int) {
	if id := m.color; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetColor reset all changes of the "color" edge.
func (m *MeasurementMutation) ResetColor() {
	m.color = nil
	m.clearedcolor = false
}

// AddActivityIDs adds the activities edge to Activity by ids.
func (m *MeasurementMutation) AddActivityIDs(ids ...int) {
	if m.activities == nil {
		m.activities = make(map[int]struct{})
	}
	for i := range ids {
		m.activities[ids[i]] = struct{}{}
	}
}

// ClearActivities clears the activities edge to Activity.
func (m *MeasurementMutation) ClearActivities() {
	m.clearedactivities = true
}

// ActivitiesCleared returns if the edge activities was cleared.
func (m *MeasurementMutation) ActivitiesCleared() bool {
	return m.clearedactivities
}

// RemoveActivityIDs removes the activities edge to Activity by ids.
func (m *MeasurementMutation) RemoveActivityIDs(ids ...int) {
	if m.removedactivities == nil {
		m.removedactivities = make(map[int]struct{})
	}
	for i := range ids {
		m.removedactivities[ids[i]] = struct{}{}
	}
}

// RemovedActivities returns the removed ids of activities.
func (m *MeasurementMutation) RemovedActivitiesIDs() (ids []int) {
	for id := range m.removedactivities {
		ids = append(ids, id)
	}
	return
}

// ActivitiesIDs returns the activities ids in the mutation.
func (m *MeasurementMutation) ActivitiesIDs() (ids []int) {
	for id := range m.activities {
		ids = append(ids, id)
	}
	return
}

// ResetActivities reset all changes of the "activities" edge.
func (m *MeasurementMutation) ResetActivities() {
	m.activities = nil
	m.clearedactivities = false
	m.removedactivities = nil
}

// AddMeasureIDs adds the measures edge to Measure by ids.
func (m *MeasurementMutation) AddMeasureIDs(ids ...int) {
	if m.measures == nil {
		m.measures = make(map[int]struct{})
	}
	for i := range ids {
		m.measures[ids[i]] = struct{}{}
	}
}

// ClearMeasures clears the measures edge to Measure.
func (m *MeasurementMutation) ClearMeasures() {
	m.clearedmeasures = true
}

// MeasuresCleared returns if the edge measures was cleared.
func (m *MeasurementMutation) MeasuresCleared() bool {
	return m.clearedmeasures
}

// RemoveMeasureIDs removes the measures edge to Measure by ids.
func (m *MeasurementMutation) RemoveMeasureIDs(ids ...int) {
	if m.removedmeasures == nil {
		m.removedmeasures = make(map[int]struct{})
	}
	for i := range ids {
		m.removedmeasures[ids[i]] = struct{}{}
	}
}

// RemovedMeasures returns the removed ids of measures.
func (m *MeasurementMutation) RemovedMeasuresIDs() (ids []int) {
	for id := range m.removedmeasures {
		ids = append(ids, id)
	}
	return
}

// MeasuresIDs returns the measures ids in the mutation.
func (m *MeasurementMutation) MeasuresIDs() (ids []int) {
	for id := range m.measures {
		ids = append(ids, id)
	}
	return
}

// ResetMeasures reset all changes of the "measures" edge.
func (m *MeasurementMutation) ResetMeasures() {
	m.measures = nil
	m.clearedmeasures = false
	m.removedmeasures = nil
}

// Op returns the operation name.
func (m *MeasurementMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Measurement).
func (m *MeasurementMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *MeasurementMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, measurement.FieldName)
	}
	if m.enabled != nil {
		fields = append(fields, measurement.FieldEnabled)
	}
	if m.created_at != nil {
		fields = append(fields, measurement.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *MeasurementMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case measurement.FieldName:
		return m.Name()
	case measurement.FieldEnabled:
		return m.Enabled()
	case measurement.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *MeasurementMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case measurement.FieldName:
		return m.OldName(ctx)
	case measurement.FieldEnabled:
		return m.OldEnabled(ctx)
	case measurement.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Measurement field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MeasurementMutation) SetField(name string, value ent.Value) error {
	switch name {
	case measurement.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case measurement.FieldEnabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnabled(v)
		return nil
	case measurement.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Measurement field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *MeasurementMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *MeasurementMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MeasurementMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Measurement numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *MeasurementMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *MeasurementMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *MeasurementMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Measurement nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *MeasurementMutation) ResetField(name string) error {
	switch name {
	case measurement.FieldName:
		m.ResetName()
		return nil
	case measurement.FieldEnabled:
		m.ResetEnabled()
		return nil
	case measurement.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Measurement field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *MeasurementMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.user != nil {
		edges = append(edges, measurement.EdgeUser)
	}
	if m.color != nil {
		edges = append(edges, measurement.EdgeColor)
	}
	if m.activities != nil {
		edges = append(edges, measurement.EdgeActivities)
	}
	if m.measures != nil {
		edges = append(edges, measurement.EdgeMeasures)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *MeasurementMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case measurement.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case measurement.EdgeColor:
		if id := m.color; id != nil {
			return []ent.Value{*id}
		}
	case measurement.EdgeActivities:
		ids := make([]ent.Value, 0, len(m.activities))
		for id := range m.activities {
			ids = append(ids, id)
		}
		return ids
	case measurement.EdgeMeasures:
		ids := make([]ent.Value, 0, len(m.measures))
		for id := range m.measures {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *MeasurementMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedactivities != nil {
		edges = append(edges, measurement.EdgeActivities)
	}
	if m.removedmeasures != nil {
		edges = append(edges, measurement.EdgeMeasures)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *MeasurementMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case measurement.EdgeActivities:
		ids := make([]ent.Value, 0, len(m.removedactivities))
		for id := range m.removedactivities {
			ids = append(ids, id)
		}
		return ids
	case measurement.EdgeMeasures:
		ids := make([]ent.Value, 0, len(m.removedmeasures))
		for id := range m.removedmeasures {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *MeasurementMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.cleareduser {
		edges = append(edges, measurement.EdgeUser)
	}
	if m.clearedcolor {
		edges = append(edges, measurement.EdgeColor)
	}
	if m.clearedactivities {
		edges = append(edges, measurement.EdgeActivities)
	}
	if m.clearedmeasures {
		edges = append(edges, measurement.EdgeMeasures)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *MeasurementMutation) EdgeCleared(name string) bool {
	switch name {
	case measurement.EdgeUser:
		return m.cleareduser
	case measurement.EdgeColor:
		return m.clearedcolor
	case measurement.EdgeActivities:
		return m.clearedactivities
	case measurement.EdgeMeasures:
		return m.clearedmeasures
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *MeasurementMutation) ClearEdge(name string) error {
	switch name {
	case measurement.EdgeUser:
		m.ClearUser()
		return nil
	case measurement.EdgeColor:
		m.ClearColor()
		return nil
	}
	return fmt.Errorf("unknown Measurement unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *MeasurementMutation) ResetEdge(name string) error {
	switch name {
	case measurement.EdgeUser:
		m.ResetUser()
		return nil
	case measurement.EdgeColor:
		m.ResetColor()
		return nil
	case measurement.EdgeActivities:
		m.ResetActivities()
		return nil
	case measurement.EdgeMeasures:
		m.ResetMeasures()
		return nil
	}
	return fmt.Errorf("unknown Measurement edge %s", name)
}

// RecordMutation represents an operation that mutate the Records
// nodes in the graph.
type RecordMutation struct {
	config
	op              Op
	typ             string
	id              *int
	start           *time.Time
	end             *time.Time
	clearedFields   map[string]struct{}
	activity        *int
	clearedactivity bool
	measures        map[int]struct{}
	removedmeasures map[int]struct{}
	clearedmeasures bool
	done            bool
	oldValue        func(context.Context) (*Record, error)
	predicates      []predicate.Record
}

var _ ent.Mutation = (*RecordMutation)(nil)

// recordOption allows to manage the mutation configuration using functional options.
type recordOption func(*RecordMutation)

// newRecordMutation creates new mutation for Record.
func newRecordMutation(c config, op Op, opts ...recordOption) *RecordMutation {
	m := &RecordMutation{
		config:        c,
		op:            op,
		typ:           TypeRecord,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRecordID sets the id field of the mutation.
func withRecordID(id int) recordOption {
	return func(m *RecordMutation) {
		var (
			err   error
			once  sync.Once
			value *Record
		)
		m.oldValue = func(ctx context.Context) (*Record, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Record.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRecord sets the old Record of the mutation.
func withRecord(node *Record) recordOption {
	return func(m *RecordMutation) {
		m.oldValue = func(context.Context) (*Record, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RecordMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RecordMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *RecordMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetStart sets the start field.
func (m *RecordMutation) SetStart(t time.Time) {
	m.start = &t
}

// Start returns the start value in the mutation.
func (m *RecordMutation) Start() (r time.Time, exists bool) {
	v := m.start
	if v == nil {
		return
	}
	return *v, true
}

// OldStart returns the old start value of the Record.
// If the Record object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RecordMutation) OldStart(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStart is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStart requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStart: %w", err)
	}
	return oldValue.Start, nil
}

// ResetStart reset all changes of the "start" field.
func (m *RecordMutation) ResetStart() {
	m.start = nil
}

// SetEnd sets the end field.
func (m *RecordMutation) SetEnd(t time.Time) {
	m.end = &t
}

// End returns the end value in the mutation.
func (m *RecordMutation) End() (r time.Time, exists bool) {
	v := m.end
	if v == nil {
		return
	}
	return *v, true
}

// OldEnd returns the old end value of the Record.
// If the Record object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RecordMutation) OldEnd(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEnd is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEnd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnd: %w", err)
	}
	return oldValue.End, nil
}

// ResetEnd reset all changes of the "end" field.
func (m *RecordMutation) ResetEnd() {
	m.end = nil
}

// SetActivityID sets the activity edge to Activity by id.
func (m *RecordMutation) SetActivityID(id int) {
	m.activity = &id
}

// ClearActivity clears the activity edge to Activity.
func (m *RecordMutation) ClearActivity() {
	m.clearedactivity = true
}

// ActivityCleared returns if the edge activity was cleared.
func (m *RecordMutation) ActivityCleared() bool {
	return m.clearedactivity
}

// ActivityID returns the activity id in the mutation.
func (m *RecordMutation) ActivityID() (id int, exists bool) {
	if m.activity != nil {
		return *m.activity, true
	}
	return
}

// ActivityIDs returns the activity ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// ActivityID instead. It exists only for internal usage by the builders.
func (m *RecordMutation) ActivityIDs() (ids []int) {
	if id := m.activity; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetActivity reset all changes of the "activity" edge.
func (m *RecordMutation) ResetActivity() {
	m.activity = nil
	m.clearedactivity = false
}

// AddMeasureIDs adds the measures edge to Measure by ids.
func (m *RecordMutation) AddMeasureIDs(ids ...int) {
	if m.measures == nil {
		m.measures = make(map[int]struct{})
	}
	for i := range ids {
		m.measures[ids[i]] = struct{}{}
	}
}

// ClearMeasures clears the measures edge to Measure.
func (m *RecordMutation) ClearMeasures() {
	m.clearedmeasures = true
}

// MeasuresCleared returns if the edge measures was cleared.
func (m *RecordMutation) MeasuresCleared() bool {
	return m.clearedmeasures
}

// RemoveMeasureIDs removes the measures edge to Measure by ids.
func (m *RecordMutation) RemoveMeasureIDs(ids ...int) {
	if m.removedmeasures == nil {
		m.removedmeasures = make(map[int]struct{})
	}
	for i := range ids {
		m.removedmeasures[ids[i]] = struct{}{}
	}
}

// RemovedMeasures returns the removed ids of measures.
func (m *RecordMutation) RemovedMeasuresIDs() (ids []int) {
	for id := range m.removedmeasures {
		ids = append(ids, id)
	}
	return
}

// MeasuresIDs returns the measures ids in the mutation.
func (m *RecordMutation) MeasuresIDs() (ids []int) {
	for id := range m.measures {
		ids = append(ids, id)
	}
	return
}

// ResetMeasures reset all changes of the "measures" edge.
func (m *RecordMutation) ResetMeasures() {
	m.measures = nil
	m.clearedmeasures = false
	m.removedmeasures = nil
}

// Op returns the operation name.
func (m *RecordMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Record).
func (m *RecordMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *RecordMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.start != nil {
		fields = append(fields, record.FieldStart)
	}
	if m.end != nil {
		fields = append(fields, record.FieldEnd)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *RecordMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case record.FieldStart:
		return m.Start()
	case record.FieldEnd:
		return m.End()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *RecordMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case record.FieldStart:
		return m.OldStart(ctx)
	case record.FieldEnd:
		return m.OldEnd(ctx)
	}
	return nil, fmt.Errorf("unknown Record field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RecordMutation) SetField(name string, value ent.Value) error {
	switch name {
	case record.FieldStart:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStart(v)
		return nil
	case record.FieldEnd:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnd(v)
		return nil
	}
	return fmt.Errorf("unknown Record field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *RecordMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *RecordMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RecordMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Record numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *RecordMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *RecordMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *RecordMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Record nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *RecordMutation) ResetField(name string) error {
	switch name {
	case record.FieldStart:
		m.ResetStart()
		return nil
	case record.FieldEnd:
		m.ResetEnd()
		return nil
	}
	return fmt.Errorf("unknown Record field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *RecordMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.activity != nil {
		edges = append(edges, record.EdgeActivity)
	}
	if m.measures != nil {
		edges = append(edges, record.EdgeMeasures)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *RecordMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case record.EdgeActivity:
		if id := m.activity; id != nil {
			return []ent.Value{*id}
		}
	case record.EdgeMeasures:
		ids := make([]ent.Value, 0, len(m.measures))
		for id := range m.measures {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *RecordMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedmeasures != nil {
		edges = append(edges, record.EdgeMeasures)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *RecordMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case record.EdgeMeasures:
		ids := make([]ent.Value, 0, len(m.removedmeasures))
		for id := range m.removedmeasures {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *RecordMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedactivity {
		edges = append(edges, record.EdgeActivity)
	}
	if m.clearedmeasures {
		edges = append(edges, record.EdgeMeasures)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *RecordMutation) EdgeCleared(name string) bool {
	switch name {
	case record.EdgeActivity:
		return m.clearedactivity
	case record.EdgeMeasures:
		return m.clearedmeasures
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *RecordMutation) ClearEdge(name string) error {
	switch name {
	case record.EdgeActivity:
		m.ClearActivity()
		return nil
	}
	return fmt.Errorf("unknown Record unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *RecordMutation) ResetEdge(name string) error {
	switch name {
	case record.EdgeActivity:
		m.ResetActivity()
		return nil
	case record.EdgeMeasures:
		m.ResetMeasures()
		return nil
	}
	return fmt.Errorf("unknown Record edge %s", name)
}

// UserMutation represents an operation that mutate the Users
// nodes in the graph.
type UserMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	name                *string
	last_name           *string
	email               *string
	password            *string
	created_at          *time.Time
	clearedFields       map[string]struct{}
	measurements        map[int]struct{}
	removedmeasurements map[int]struct{}
	clearedmeasurements bool
	activities          map[int]struct{}
	removedactivities   map[int]struct{}
	clearedactivities   bool
	done                bool
	oldValue            func(context.Context) (*User, error)
	predicates          []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows to manage the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for User.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the id field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetLastName sets the last_name field.
func (m *UserMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the last_name value in the mutation.
func (m *UserMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old last_name value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLastName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ResetLastName reset all changes of the "last_name" field.
func (m *UserMutation) ResetLastName() {
	m.last_name = nil
}

// SetEmail sets the email field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the email value in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old email value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail reset all changes of the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the password field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the password value in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old password value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword reset all changes of the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetCreatedAt sets the created_at field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the created_at value in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old created_at value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt reset all changes of the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddMeasurementIDs adds the measurements edge to Measurement by ids.
func (m *UserMutation) AddMeasurementIDs(ids ...int) {
	if m.measurements == nil {
		m.measurements = make(map[int]struct{})
	}
	for i := range ids {
		m.measurements[ids[i]] = struct{}{}
	}
}

// ClearMeasurements clears the measurements edge to Measurement.
func (m *UserMutation) ClearMeasurements() {
	m.clearedmeasurements = true
}

// MeasurementsCleared returns if the edge measurements was cleared.
func (m *UserMutation) MeasurementsCleared() bool {
	return m.clearedmeasurements
}

// RemoveMeasurementIDs removes the measurements edge to Measurement by ids.
func (m *UserMutation) RemoveMeasurementIDs(ids ...int) {
	if m.removedmeasurements == nil {
		m.removedmeasurements = make(map[int]struct{})
	}
	for i := range ids {
		m.removedmeasurements[ids[i]] = struct{}{}
	}
}

// RemovedMeasurements returns the removed ids of measurements.
func (m *UserMutation) RemovedMeasurementsIDs() (ids []int) {
	for id := range m.removedmeasurements {
		ids = append(ids, id)
	}
	return
}

// MeasurementsIDs returns the measurements ids in the mutation.
func (m *UserMutation) MeasurementsIDs() (ids []int) {
	for id := range m.measurements {
		ids = append(ids, id)
	}
	return
}

// ResetMeasurements reset all changes of the "measurements" edge.
func (m *UserMutation) ResetMeasurements() {
	m.measurements = nil
	m.clearedmeasurements = false
	m.removedmeasurements = nil
}

// AddActivityIDs adds the activities edge to Activity by ids.
func (m *UserMutation) AddActivityIDs(ids ...int) {
	if m.activities == nil {
		m.activities = make(map[int]struct{})
	}
	for i := range ids {
		m.activities[ids[i]] = struct{}{}
	}
}

// ClearActivities clears the activities edge to Activity.
func (m *UserMutation) ClearActivities() {
	m.clearedactivities = true
}

// ActivitiesCleared returns if the edge activities was cleared.
func (m *UserMutation) ActivitiesCleared() bool {
	return m.clearedactivities
}

// RemoveActivityIDs removes the activities edge to Activity by ids.
func (m *UserMutation) RemoveActivityIDs(ids ...int) {
	if m.removedactivities == nil {
		m.removedactivities = make(map[int]struct{})
	}
	for i := range ids {
		m.removedactivities[ids[i]] = struct{}{}
	}
}

// RemovedActivities returns the removed ids of activities.
func (m *UserMutation) RemovedActivitiesIDs() (ids []int) {
	for id := range m.removedactivities {
		ids = append(ids, id)
	}
	return
}

// ActivitiesIDs returns the activities ids in the mutation.
func (m *UserMutation) ActivitiesIDs() (ids []int) {
	for id := range m.activities {
		ids = append(ids, id)
	}
	return
}

// ResetActivities reset all changes of the "activities" edge.
func (m *UserMutation) ResetActivities() {
	m.activities = nil
	m.clearedactivities = false
	m.removedactivities = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.last_name != nil {
		fields = append(fields, user.FieldLastName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldLastName:
		return m.LastName()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPassword:
		return m.Password()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldLastName:
		return m.OldLastName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldLastName:
		m.ResetLastName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.measurements != nil {
		edges = append(edges, user.EdgeMeasurements)
	}
	if m.activities != nil {
		edges = append(edges, user.EdgeActivities)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeMeasurements:
		ids := make([]ent.Value, 0, len(m.measurements))
		for id := range m.measurements {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeActivities:
		ids := make([]ent.Value, 0, len(m.activities))
		for id := range m.activities {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedmeasurements != nil {
		edges = append(edges, user.EdgeMeasurements)
	}
	if m.removedactivities != nil {
		edges = append(edges, user.EdgeActivities)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeMeasurements:
		ids := make([]ent.Value, 0, len(m.removedmeasurements))
		for id := range m.removedmeasurements {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeActivities:
		ids := make([]ent.Value, 0, len(m.removedactivities))
		for id := range m.removedactivities {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedmeasurements {
		edges = append(edges, user.EdgeMeasurements)
	}
	if m.clearedactivities {
		edges = append(edges, user.EdgeActivities)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeMeasurements:
		return m.clearedmeasurements
	case user.EdgeActivities:
		return m.clearedactivities
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeMeasurements:
		m.ResetMeasurements()
		return nil
	case user.EdgeActivities:
		m.ResetActivities()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
