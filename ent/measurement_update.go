// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/vmkevv/suprat-api/ent/activity"
	"github.com/vmkevv/suprat-api/ent/color"
	"github.com/vmkevv/suprat-api/ent/measure"
	"github.com/vmkevv/suprat-api/ent/measurement"
	"github.com/vmkevv/suprat-api/ent/predicate"
	"github.com/vmkevv/suprat-api/ent/user"
)

// MeasurementUpdate is the builder for updating Measurement entities.
type MeasurementUpdate struct {
	config
	hooks    []Hook
	mutation *MeasurementMutation
}

// Where adds a new predicate for the builder.
func (mu *MeasurementUpdate) Where(ps ...predicate.Measurement) *MeasurementUpdate {
	mu.mutation.predicates = append(mu.mutation.predicates, ps...)
	return mu
}

// SetName sets the name field.
func (mu *MeasurementUpdate) SetName(s string) *MeasurementUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetEnabled sets the enabled field.
func (mu *MeasurementUpdate) SetEnabled(b bool) *MeasurementUpdate {
	mu.mutation.SetEnabled(b)
	return mu
}

// SetNillableEnabled sets the enabled field if the given value is not nil.
func (mu *MeasurementUpdate) SetNillableEnabled(b *bool) *MeasurementUpdate {
	if b != nil {
		mu.SetEnabled(*b)
	}
	return mu
}

// SetCreatedAt sets the created_at field.
func (mu *MeasurementUpdate) SetCreatedAt(t time.Time) *MeasurementUpdate {
	mu.mutation.SetCreatedAt(t)
	return mu
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (mu *MeasurementUpdate) SetNillableCreatedAt(t *time.Time) *MeasurementUpdate {
	if t != nil {
		mu.SetCreatedAt(*t)
	}
	return mu
}

// SetUserID sets the user edge to User by id.
func (mu *MeasurementUpdate) SetUserID(id int) *MeasurementUpdate {
	mu.mutation.SetUserID(id)
	return mu
}

// SetUser sets the user edge to User.
func (mu *MeasurementUpdate) SetUser(u *User) *MeasurementUpdate {
	return mu.SetUserID(u.ID)
}

// SetColorID sets the color edge to Color by id.
func (mu *MeasurementUpdate) SetColorID(id int) *MeasurementUpdate {
	mu.mutation.SetColorID(id)
	return mu
}

// SetColor sets the color edge to Color.
func (mu *MeasurementUpdate) SetColor(c *Color) *MeasurementUpdate {
	return mu.SetColorID(c.ID)
}

// AddActivityIDs adds the activities edge to Activity by ids.
func (mu *MeasurementUpdate) AddActivityIDs(ids ...int) *MeasurementUpdate {
	mu.mutation.AddActivityIDs(ids...)
	return mu
}

// AddActivities adds the activities edges to Activity.
func (mu *MeasurementUpdate) AddActivities(a ...*Activity) *MeasurementUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mu.AddActivityIDs(ids...)
}

// AddMeasureIDs adds the measures edge to Measure by ids.
func (mu *MeasurementUpdate) AddMeasureIDs(ids ...int) *MeasurementUpdate {
	mu.mutation.AddMeasureIDs(ids...)
	return mu
}

// AddMeasures adds the measures edges to Measure.
func (mu *MeasurementUpdate) AddMeasures(m ...*Measure) *MeasurementUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddMeasureIDs(ids...)
}

// Mutation returns the MeasurementMutation object of the builder.
func (mu *MeasurementUpdate) Mutation() *MeasurementMutation {
	return mu.mutation
}

// ClearUser clears the "user" edge to type User.
func (mu *MeasurementUpdate) ClearUser() *MeasurementUpdate {
	mu.mutation.ClearUser()
	return mu
}

// ClearColor clears the "color" edge to type Color.
func (mu *MeasurementUpdate) ClearColor() *MeasurementUpdate {
	mu.mutation.ClearColor()
	return mu
}

// ClearActivities clears all "activities" edges to type Activity.
func (mu *MeasurementUpdate) ClearActivities() *MeasurementUpdate {
	mu.mutation.ClearActivities()
	return mu
}

// RemoveActivityIDs removes the activities edge to Activity by ids.
func (mu *MeasurementUpdate) RemoveActivityIDs(ids ...int) *MeasurementUpdate {
	mu.mutation.RemoveActivityIDs(ids...)
	return mu
}

// RemoveActivities removes activities edges to Activity.
func (mu *MeasurementUpdate) RemoveActivities(a ...*Activity) *MeasurementUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mu.RemoveActivityIDs(ids...)
}

// ClearMeasures clears all "measures" edges to type Measure.
func (mu *MeasurementUpdate) ClearMeasures() *MeasurementUpdate {
	mu.mutation.ClearMeasures()
	return mu
}

// RemoveMeasureIDs removes the measures edge to Measure by ids.
func (mu *MeasurementUpdate) RemoveMeasureIDs(ids ...int) *MeasurementUpdate {
	mu.mutation.RemoveMeasureIDs(ids...)
	return mu
}

// RemoveMeasures removes measures edges to Measure.
func (mu *MeasurementUpdate) RemoveMeasures(m ...*Measure) *MeasurementUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveMeasureIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MeasurementUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mu.hooks) == 0 {
		if err = mu.check(); err != nil {
			return 0, err
		}
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MeasurementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mu.check(); err != nil {
				return 0, err
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MeasurementUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MeasurementUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MeasurementUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MeasurementUpdate) check() error {
	if _, ok := mu.mutation.UserID(); mu.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	if _, ok := mu.mutation.ColorID(); mu.mutation.ColorCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"color\"")
	}
	return nil
}

func (mu *MeasurementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   measurement.Table,
			Columns: measurement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: measurement.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: measurement.FieldName,
		})
	}
	if value, ok := mu.mutation.Enabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: measurement.FieldEnabled,
		})
	}
	if value, ok := mu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: measurement.FieldCreatedAt,
		})
	}
	if mu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   measurement.UserTable,
			Columns: []string{measurement.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   measurement.UserTable,
			Columns: []string{measurement.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ColorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   measurement.ColorTable,
			Columns: []string{measurement.ColorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: color.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ColorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   measurement.ColorTable,
			Columns: []string{measurement.ColorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: color.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   measurement.ActivitiesTable,
			Columns: measurement.ActivitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedActivitiesIDs(); len(nodes) > 0 && !mu.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   measurement.ActivitiesTable,
			Columns: measurement.ActivitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   measurement.ActivitiesTable,
			Columns: measurement.ActivitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.MeasuresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   measurement.MeasuresTable,
			Columns: []string{measurement.MeasuresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: measure.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedMeasuresIDs(); len(nodes) > 0 && !mu.mutation.MeasuresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   measurement.MeasuresTable,
			Columns: []string{measurement.MeasuresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: measure.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MeasuresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   measurement.MeasuresTable,
			Columns: []string{measurement.MeasuresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: measure.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{measurement.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MeasurementUpdateOne is the builder for updating a single Measurement entity.
type MeasurementUpdateOne struct {
	config
	hooks    []Hook
	mutation *MeasurementMutation
}

// SetName sets the name field.
func (muo *MeasurementUpdateOne) SetName(s string) *MeasurementUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetEnabled sets the enabled field.
func (muo *MeasurementUpdateOne) SetEnabled(b bool) *MeasurementUpdateOne {
	muo.mutation.SetEnabled(b)
	return muo
}

// SetNillableEnabled sets the enabled field if the given value is not nil.
func (muo *MeasurementUpdateOne) SetNillableEnabled(b *bool) *MeasurementUpdateOne {
	if b != nil {
		muo.SetEnabled(*b)
	}
	return muo
}

// SetCreatedAt sets the created_at field.
func (muo *MeasurementUpdateOne) SetCreatedAt(t time.Time) *MeasurementUpdateOne {
	muo.mutation.SetCreatedAt(t)
	return muo
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (muo *MeasurementUpdateOne) SetNillableCreatedAt(t *time.Time) *MeasurementUpdateOne {
	if t != nil {
		muo.SetCreatedAt(*t)
	}
	return muo
}

// SetUserID sets the user edge to User by id.
func (muo *MeasurementUpdateOne) SetUserID(id int) *MeasurementUpdateOne {
	muo.mutation.SetUserID(id)
	return muo
}

// SetUser sets the user edge to User.
func (muo *MeasurementUpdateOne) SetUser(u *User) *MeasurementUpdateOne {
	return muo.SetUserID(u.ID)
}

// SetColorID sets the color edge to Color by id.
func (muo *MeasurementUpdateOne) SetColorID(id int) *MeasurementUpdateOne {
	muo.mutation.SetColorID(id)
	return muo
}

// SetColor sets the color edge to Color.
func (muo *MeasurementUpdateOne) SetColor(c *Color) *MeasurementUpdateOne {
	return muo.SetColorID(c.ID)
}

// AddActivityIDs adds the activities edge to Activity by ids.
func (muo *MeasurementUpdateOne) AddActivityIDs(ids ...int) *MeasurementUpdateOne {
	muo.mutation.AddActivityIDs(ids...)
	return muo
}

// AddActivities adds the activities edges to Activity.
func (muo *MeasurementUpdateOne) AddActivities(a ...*Activity) *MeasurementUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return muo.AddActivityIDs(ids...)
}

// AddMeasureIDs adds the measures edge to Measure by ids.
func (muo *MeasurementUpdateOne) AddMeasureIDs(ids ...int) *MeasurementUpdateOne {
	muo.mutation.AddMeasureIDs(ids...)
	return muo
}

// AddMeasures adds the measures edges to Measure.
func (muo *MeasurementUpdateOne) AddMeasures(m ...*Measure) *MeasurementUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddMeasureIDs(ids...)
}

// Mutation returns the MeasurementMutation object of the builder.
func (muo *MeasurementUpdateOne) Mutation() *MeasurementMutation {
	return muo.mutation
}

// ClearUser clears the "user" edge to type User.
func (muo *MeasurementUpdateOne) ClearUser() *MeasurementUpdateOne {
	muo.mutation.ClearUser()
	return muo
}

// ClearColor clears the "color" edge to type Color.
func (muo *MeasurementUpdateOne) ClearColor() *MeasurementUpdateOne {
	muo.mutation.ClearColor()
	return muo
}

// ClearActivities clears all "activities" edges to type Activity.
func (muo *MeasurementUpdateOne) ClearActivities() *MeasurementUpdateOne {
	muo.mutation.ClearActivities()
	return muo
}

// RemoveActivityIDs removes the activities edge to Activity by ids.
func (muo *MeasurementUpdateOne) RemoveActivityIDs(ids ...int) *MeasurementUpdateOne {
	muo.mutation.RemoveActivityIDs(ids...)
	return muo
}

// RemoveActivities removes activities edges to Activity.
func (muo *MeasurementUpdateOne) RemoveActivities(a ...*Activity) *MeasurementUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return muo.RemoveActivityIDs(ids...)
}

// ClearMeasures clears all "measures" edges to type Measure.
func (muo *MeasurementUpdateOne) ClearMeasures() *MeasurementUpdateOne {
	muo.mutation.ClearMeasures()
	return muo
}

// RemoveMeasureIDs removes the measures edge to Measure by ids.
func (muo *MeasurementUpdateOne) RemoveMeasureIDs(ids ...int) *MeasurementUpdateOne {
	muo.mutation.RemoveMeasureIDs(ids...)
	return muo
}

// RemoveMeasures removes measures edges to Measure.
func (muo *MeasurementUpdateOne) RemoveMeasures(m ...*Measure) *MeasurementUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveMeasureIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (muo *MeasurementUpdateOne) Save(ctx context.Context) (*Measurement, error) {
	var (
		err  error
		node *Measurement
	)
	if len(muo.hooks) == 0 {
		if err = muo.check(); err != nil {
			return nil, err
		}
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MeasurementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = muo.check(); err != nil {
				return nil, err
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			mut = muo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MeasurementUpdateOne) SaveX(ctx context.Context) *Measurement {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MeasurementUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MeasurementUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MeasurementUpdateOne) check() error {
	if _, ok := muo.mutation.UserID(); muo.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	if _, ok := muo.mutation.ColorID(); muo.mutation.ColorCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"color\"")
	}
	return nil
}

func (muo *MeasurementUpdateOne) sqlSave(ctx context.Context) (_node *Measurement, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   measurement.Table,
			Columns: measurement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: measurement.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Measurement.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := muo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: measurement.FieldName,
		})
	}
	if value, ok := muo.mutation.Enabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: measurement.FieldEnabled,
		})
	}
	if value, ok := muo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: measurement.FieldCreatedAt,
		})
	}
	if muo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   measurement.UserTable,
			Columns: []string{measurement.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   measurement.UserTable,
			Columns: []string{measurement.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ColorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   measurement.ColorTable,
			Columns: []string{measurement.ColorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: color.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ColorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   measurement.ColorTable,
			Columns: []string{measurement.ColorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: color.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   measurement.ActivitiesTable,
			Columns: measurement.ActivitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedActivitiesIDs(); len(nodes) > 0 && !muo.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   measurement.ActivitiesTable,
			Columns: measurement.ActivitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   measurement.ActivitiesTable,
			Columns: measurement.ActivitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.MeasuresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   measurement.MeasuresTable,
			Columns: []string{measurement.MeasuresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: measure.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedMeasuresIDs(); len(nodes) > 0 && !muo.mutation.MeasuresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   measurement.MeasuresTable,
			Columns: []string{measurement.MeasuresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: measure.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MeasuresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   measurement.MeasuresTable,
			Columns: []string{measurement.MeasuresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: measure.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Measurement{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{measurement.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
