// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/vmkevv/suprat-api/ent/measure"
	"github.com/vmkevv/suprat-api/ent/measurement"
	"github.com/vmkevv/suprat-api/ent/record"
)

// Measure is the model entity for the Measure schema.
type Measure struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int `json:"quantity,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MeasureQuery when eager-loading is set.
	Edges                MeasureEdges `json:"edges"`
	measurement_measures *int
	record_measures      *int
}

// MeasureEdges holds the relations/edges for other nodes in the graph.
type MeasureEdges struct {
	// Record holds the value of the record edge.
	Record *Record
	// Measurement holds the value of the measurement edge.
	Measurement *Measurement
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RecordOrErr returns the Record value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MeasureEdges) RecordOrErr() (*Record, error) {
	if e.loadedTypes[0] {
		if e.Record == nil {
			// The edge record was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: record.Label}
		}
		return e.Record, nil
	}
	return nil, &NotLoadedError{edge: "record"}
}

// MeasurementOrErr returns the Measurement value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MeasureEdges) MeasurementOrErr() (*Measurement, error) {
	if e.loadedTypes[1] {
		if e.Measurement == nil {
			// The edge measurement was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: measurement.Label}
		}
		return e.Measurement, nil
	}
	return nil, &NotLoadedError{edge: "measurement"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Measure) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullInt64{}, // quantity
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Measure) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // measurement_measures
		&sql.NullInt64{}, // record_measures
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Measure fields.
func (m *Measure) assignValues(values ...interface{}) error {
	if m, n := len(values), len(measure.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	m.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field quantity", values[0])
	} else if value.Valid {
		m.Quantity = int(value.Int64)
	}
	values = values[1:]
	if len(values) == len(measure.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field measurement_measures", value)
		} else if value.Valid {
			m.measurement_measures = new(int)
			*m.measurement_measures = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field record_measures", value)
		} else if value.Valid {
			m.record_measures = new(int)
			*m.record_measures = int(value.Int64)
		}
	}
	return nil
}

// QueryRecord queries the record edge of the Measure.
func (m *Measure) QueryRecord() *RecordQuery {
	return (&MeasureClient{config: m.config}).QueryRecord(m)
}

// QueryMeasurement queries the measurement edge of the Measure.
func (m *Measure) QueryMeasurement() *MeasurementQuery {
	return (&MeasureClient{config: m.config}).QueryMeasurement(m)
}

// Update returns a builder for updating this Measure.
// Note that, you need to call Measure.Unwrap() before calling this method, if this Measure
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Measure) Update() *MeasureUpdateOne {
	return (&MeasureClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (m *Measure) Unwrap() *Measure {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Measure is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Measure) String() string {
	var builder strings.Builder
	builder.WriteString("Measure(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", quantity=")
	builder.WriteString(fmt.Sprintf("%v", m.Quantity))
	builder.WriteByte(')')
	return builder.String()
}

// Measures is a parsable slice of Measure.
type Measures []*Measure

func (m Measures) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
