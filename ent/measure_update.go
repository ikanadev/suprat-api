// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/vmkevv/suprat-api/ent/measure"
	"github.com/vmkevv/suprat-api/ent/measurement"
	"github.com/vmkevv/suprat-api/ent/predicate"
	"github.com/vmkevv/suprat-api/ent/record"
)

// MeasureUpdate is the builder for updating Measure entities.
type MeasureUpdate struct {
	config
	hooks    []Hook
	mutation *MeasureMutation
}

// Where adds a new predicate for the builder.
func (mu *MeasureUpdate) Where(ps ...predicate.Measure) *MeasureUpdate {
	mu.mutation.predicates = append(mu.mutation.predicates, ps...)
	return mu
}

// SetQuantity sets the quantity field.
func (mu *MeasureUpdate) SetQuantity(i int) *MeasureUpdate {
	mu.mutation.ResetQuantity()
	mu.mutation.SetQuantity(i)
	return mu
}

// AddQuantity adds i to quantity.
func (mu *MeasureUpdate) AddQuantity(i int) *MeasureUpdate {
	mu.mutation.AddQuantity(i)
	return mu
}

// SetRecordID sets the record edge to Record by id.
func (mu *MeasureUpdate) SetRecordID(id int) *MeasureUpdate {
	mu.mutation.SetRecordID(id)
	return mu
}

// SetRecord sets the record edge to Record.
func (mu *MeasureUpdate) SetRecord(r *Record) *MeasureUpdate {
	return mu.SetRecordID(r.ID)
}

// SetMeasurementID sets the measurement edge to Measurement by id.
func (mu *MeasureUpdate) SetMeasurementID(id int) *MeasureUpdate {
	mu.mutation.SetMeasurementID(id)
	return mu
}

// SetMeasurement sets the measurement edge to Measurement.
func (mu *MeasureUpdate) SetMeasurement(m *Measurement) *MeasureUpdate {
	return mu.SetMeasurementID(m.ID)
}

// Mutation returns the MeasureMutation object of the builder.
func (mu *MeasureUpdate) Mutation() *MeasureMutation {
	return mu.mutation
}

// ClearRecord clears the "record" edge to type Record.
func (mu *MeasureUpdate) ClearRecord() *MeasureUpdate {
	mu.mutation.ClearRecord()
	return mu
}

// ClearMeasurement clears the "measurement" edge to type Measurement.
func (mu *MeasureUpdate) ClearMeasurement() *MeasureUpdate {
	mu.mutation.ClearMeasurement()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MeasureUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mu.hooks) == 0 {
		if err = mu.check(); err != nil {
			return 0, err
		}
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MeasureMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mu.check(); err != nil {
				return 0, err
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MeasureUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MeasureUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MeasureUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MeasureUpdate) check() error {
	if _, ok := mu.mutation.RecordID(); mu.mutation.RecordCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"record\"")
	}
	if _, ok := mu.mutation.MeasurementID(); mu.mutation.MeasurementCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"measurement\"")
	}
	return nil
}

func (mu *MeasureUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   measure.Table,
			Columns: measure.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: measure.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: measure.FieldQuantity,
		})
	}
	if value, ok := mu.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: measure.FieldQuantity,
		})
	}
	if mu.mutation.RecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   measure.RecordTable,
			Columns: []string{measure.RecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: record.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   measure.RecordTable,
			Columns: []string{measure.RecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: record.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.MeasurementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   measure.MeasurementTable,
			Columns: []string{measure.MeasurementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: measurement.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MeasurementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   measure.MeasurementTable,
			Columns: []string{measure.MeasurementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: measurement.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{measure.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MeasureUpdateOne is the builder for updating a single Measure entity.
type MeasureUpdateOne struct {
	config
	hooks    []Hook
	mutation *MeasureMutation
}

// SetQuantity sets the quantity field.
func (muo *MeasureUpdateOne) SetQuantity(i int) *MeasureUpdateOne {
	muo.mutation.ResetQuantity()
	muo.mutation.SetQuantity(i)
	return muo
}

// AddQuantity adds i to quantity.
func (muo *MeasureUpdateOne) AddQuantity(i int) *MeasureUpdateOne {
	muo.mutation.AddQuantity(i)
	return muo
}

// SetRecordID sets the record edge to Record by id.
func (muo *MeasureUpdateOne) SetRecordID(id int) *MeasureUpdateOne {
	muo.mutation.SetRecordID(id)
	return muo
}

// SetRecord sets the record edge to Record.
func (muo *MeasureUpdateOne) SetRecord(r *Record) *MeasureUpdateOne {
	return muo.SetRecordID(r.ID)
}

// SetMeasurementID sets the measurement edge to Measurement by id.
func (muo *MeasureUpdateOne) SetMeasurementID(id int) *MeasureUpdateOne {
	muo.mutation.SetMeasurementID(id)
	return muo
}

// SetMeasurement sets the measurement edge to Measurement.
func (muo *MeasureUpdateOne) SetMeasurement(m *Measurement) *MeasureUpdateOne {
	return muo.SetMeasurementID(m.ID)
}

// Mutation returns the MeasureMutation object of the builder.
func (muo *MeasureUpdateOne) Mutation() *MeasureMutation {
	return muo.mutation
}

// ClearRecord clears the "record" edge to type Record.
func (muo *MeasureUpdateOne) ClearRecord() *MeasureUpdateOne {
	muo.mutation.ClearRecord()
	return muo
}

// ClearMeasurement clears the "measurement" edge to type Measurement.
func (muo *MeasureUpdateOne) ClearMeasurement() *MeasureUpdateOne {
	muo.mutation.ClearMeasurement()
	return muo
}

// Save executes the query and returns the updated entity.
func (muo *MeasureUpdateOne) Save(ctx context.Context) (*Measure, error) {
	var (
		err  error
		node *Measure
	)
	if len(muo.hooks) == 0 {
		if err = muo.check(); err != nil {
			return nil, err
		}
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MeasureMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = muo.check(); err != nil {
				return nil, err
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			mut = muo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MeasureUpdateOne) SaveX(ctx context.Context) *Measure {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MeasureUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MeasureUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MeasureUpdateOne) check() error {
	if _, ok := muo.mutation.RecordID(); muo.mutation.RecordCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"record\"")
	}
	if _, ok := muo.mutation.MeasurementID(); muo.mutation.MeasurementCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"measurement\"")
	}
	return nil
}

func (muo *MeasureUpdateOne) sqlSave(ctx context.Context) (_node *Measure, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   measure.Table,
			Columns: measure.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: measure.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Measure.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := muo.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: measure.FieldQuantity,
		})
	}
	if value, ok := muo.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: measure.FieldQuantity,
		})
	}
	if muo.mutation.RecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   measure.RecordTable,
			Columns: []string{measure.RecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: record.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   measure.RecordTable,
			Columns: []string{measure.RecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: record.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.MeasurementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   measure.MeasurementTable,
			Columns: []string{measure.MeasurementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: measurement.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MeasurementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   measure.MeasurementTable,
			Columns: []string{measure.MeasurementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: measurement.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Measure{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{measure.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
