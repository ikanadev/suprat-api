// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/vmkevv/suprat-api/ent/color"
	"github.com/vmkevv/suprat-api/ent/measurement"
	"github.com/vmkevv/suprat-api/ent/user"
)

// Measurement is the model entity for the Measurement schema.
type Measurement struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Enabled holds the value of the "enabled" field.
	Enabled bool `json:"enabled,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MeasurementQuery when eager-loading is set.
	Edges              MeasurementEdges `json:"edges"`
	color_measurements *int
	user_measurements  *int
}

// MeasurementEdges holds the relations/edges for other nodes in the graph.
type MeasurementEdges struct {
	// User holds the value of the user edge.
	User *User
	// Color holds the value of the color edge.
	Color *Color
	// Activities holds the value of the activities edge.
	Activities []*Activity
	// Measures holds the value of the measures edge.
	Measures []*Measure
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MeasurementEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ColorOrErr returns the Color value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MeasurementEdges) ColorOrErr() (*Color, error) {
	if e.loadedTypes[1] {
		if e.Color == nil {
			// The edge color was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: color.Label}
		}
		return e.Color, nil
	}
	return nil, &NotLoadedError{edge: "color"}
}

// ActivitiesOrErr returns the Activities value or an error if the edge
// was not loaded in eager-loading.
func (e MeasurementEdges) ActivitiesOrErr() ([]*Activity, error) {
	if e.loadedTypes[2] {
		return e.Activities, nil
	}
	return nil, &NotLoadedError{edge: "activities"}
}

// MeasuresOrErr returns the Measures value or an error if the edge
// was not loaded in eager-loading.
func (e MeasurementEdges) MeasuresOrErr() ([]*Measure, error) {
	if e.loadedTypes[3] {
		return e.Measures, nil
	}
	return nil, &NotLoadedError{edge: "measures"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Measurement) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullBool{},   // enabled
		&sql.NullTime{},   // created_at
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Measurement) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // color_measurements
		&sql.NullInt64{}, // user_measurements
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Measurement fields.
func (m *Measurement) assignValues(values ...interface{}) error {
	if m, n := len(values), len(measurement.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	m.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		m.Name = value.String
	}
	if value, ok := values[1].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field enabled", values[1])
	} else if value.Valid {
		m.Enabled = value.Bool
	}
	if value, ok := values[2].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[2])
	} else if value.Valid {
		m.CreatedAt = value.Time
	}
	values = values[3:]
	if len(values) == len(measurement.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field color_measurements", value)
		} else if value.Valid {
			m.color_measurements = new(int)
			*m.color_measurements = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_measurements", value)
		} else if value.Valid {
			m.user_measurements = new(int)
			*m.user_measurements = int(value.Int64)
		}
	}
	return nil
}

// QueryUser queries the user edge of the Measurement.
func (m *Measurement) QueryUser() *UserQuery {
	return (&MeasurementClient{config: m.config}).QueryUser(m)
}

// QueryColor queries the color edge of the Measurement.
func (m *Measurement) QueryColor() *ColorQuery {
	return (&MeasurementClient{config: m.config}).QueryColor(m)
}

// QueryActivities queries the activities edge of the Measurement.
func (m *Measurement) QueryActivities() *ActivityQuery {
	return (&MeasurementClient{config: m.config}).QueryActivities(m)
}

// QueryMeasures queries the measures edge of the Measurement.
func (m *Measurement) QueryMeasures() *MeasureQuery {
	return (&MeasurementClient{config: m.config}).QueryMeasures(m)
}

// Update returns a builder for updating this Measurement.
// Note that, you need to call Measurement.Unwrap() before calling this method, if this Measurement
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Measurement) Update() *MeasurementUpdateOne {
	return (&MeasurementClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (m *Measurement) Unwrap() *Measurement {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Measurement is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Measurement) String() string {
	var builder strings.Builder
	builder.WriteString("Measurement(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", name=")
	builder.WriteString(m.Name)
	builder.WriteString(", enabled=")
	builder.WriteString(fmt.Sprintf("%v", m.Enabled))
	builder.WriteString(", created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Measurements is a parsable slice of Measurement.
type Measurements []*Measurement

func (m Measurements) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
