// Code generated by entc, DO NOT EDIT.

package measure

const (
	// Label holds the string label denoting the measure type in the database.
	Label = "measure"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldQuantity holds the string denoting the quantity field in the database.
	FieldQuantity = "quantity"

	// EdgeRecord holds the string denoting the record edge name in mutations.
	EdgeRecord = "record"
	// EdgeMeasurement holds the string denoting the measurement edge name in mutations.
	EdgeMeasurement = "measurement"

	// Table holds the table name of the measure in the database.
	Table = "measures"
	// RecordTable is the table the holds the record relation/edge.
	RecordTable = "measures"
	// RecordInverseTable is the table name for the Record entity.
	// It exists in this package in order to avoid circular dependency with the "record" package.
	RecordInverseTable = "records"
	// RecordColumn is the table column denoting the record relation/edge.
	RecordColumn = "record_measures"
	// MeasurementTable is the table the holds the measurement relation/edge.
	MeasurementTable = "measures"
	// MeasurementInverseTable is the table name for the Measurement entity.
	// It exists in this package in order to avoid circular dependency with the "measurement" package.
	MeasurementInverseTable = "measurements"
	// MeasurementColumn is the table column denoting the measurement relation/edge.
	MeasurementColumn = "measurement_measures"
)

// Columns holds all SQL columns for measure fields.
var Columns = []string{
	FieldID,
	FieldQuantity,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Measure type.
var ForeignKeys = []string{
	"measurement_measures",
	"record_measures",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
