// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/vmkevv/suprat-api/ent/migrate"

	"github.com/vmkevv/suprat-api/ent/activity"
	"github.com/vmkevv/suprat-api/ent/color"
	"github.com/vmkevv/suprat-api/ent/icon"
	"github.com/vmkevv/suprat-api/ent/measure"
	"github.com/vmkevv/suprat-api/ent/measurement"
	"github.com/vmkevv/suprat-api/ent/record"
	"github.com/vmkevv/suprat-api/ent/user"

	"github.com/facebook/ent/dialect"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Activity is the client for interacting with the Activity builders.
	Activity *ActivityClient
	// Color is the client for interacting with the Color builders.
	Color *ColorClient
	// Icon is the client for interacting with the Icon builders.
	Icon *IconClient
	// Measure is the client for interacting with the Measure builders.
	Measure *MeasureClient
	// Measurement is the client for interacting with the Measurement builders.
	Measurement *MeasurementClient
	// Record is the client for interacting with the Record builders.
	Record *RecordClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Activity = NewActivityClient(c.config)
	c.Color = NewColorClient(c.config)
	c.Icon = NewIconClient(c.config)
	c.Measure = NewMeasureClient(c.config)
	c.Measurement = NewMeasurementClient(c.config)
	c.Record = NewRecordClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Activity:    NewActivityClient(cfg),
		Color:       NewColorClient(cfg),
		Icon:        NewIconClient(cfg),
		Measure:     NewMeasureClient(cfg),
		Measurement: NewMeasurementClient(cfg),
		Record:      NewRecordClient(cfg),
		User:        NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:      cfg,
		Activity:    NewActivityClient(cfg),
		Color:       NewColorClient(cfg),
		Icon:        NewIconClient(cfg),
		Measure:     NewMeasureClient(cfg),
		Measurement: NewMeasurementClient(cfg),
		Record:      NewRecordClient(cfg),
		User:        NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Activity.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Activity.Use(hooks...)
	c.Color.Use(hooks...)
	c.Icon.Use(hooks...)
	c.Measure.Use(hooks...)
	c.Measurement.Use(hooks...)
	c.Record.Use(hooks...)
	c.User.Use(hooks...)
}

// ActivityClient is a client for the Activity schema.
type ActivityClient struct {
	config
}

// NewActivityClient returns a client for the Activity from the given config.
func NewActivityClient(c config) *ActivityClient {
	return &ActivityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `activity.Hooks(f(g(h())))`.
func (c *ActivityClient) Use(hooks ...Hook) {
	c.hooks.Activity = append(c.hooks.Activity, hooks...)
}

// Create returns a create builder for Activity.
func (c *ActivityClient) Create() *ActivityCreate {
	mutation := newActivityMutation(c.config, OpCreate)
	return &ActivityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Activity entities.
func (c *ActivityClient) CreateBulk(builders ...*ActivityCreate) *ActivityCreateBulk {
	return &ActivityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Activity.
func (c *ActivityClient) Update() *ActivityUpdate {
	mutation := newActivityMutation(c.config, OpUpdate)
	return &ActivityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ActivityClient) UpdateOne(a *Activity) *ActivityUpdateOne {
	mutation := newActivityMutation(c.config, OpUpdateOne, withActivity(a))
	return &ActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ActivityClient) UpdateOneID(id int) *ActivityUpdateOne {
	mutation := newActivityMutation(c.config, OpUpdateOne, withActivityID(id))
	return &ActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Activity.
func (c *ActivityClient) Delete() *ActivityDelete {
	mutation := newActivityMutation(c.config, OpDelete)
	return &ActivityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ActivityClient) DeleteOne(a *Activity) *ActivityDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ActivityClient) DeleteOneID(id int) *ActivityDeleteOne {
	builder := c.Delete().Where(activity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ActivityDeleteOne{builder}
}

// Query returns a query builder for Activity.
func (c *ActivityClient) Query() *ActivityQuery {
	return &ActivityQuery{config: c.config}
}

// Get returns a Activity entity by its id.
func (c *ActivityClient) Get(ctx context.Context, id int) (*Activity, error) {
	return c.Query().Where(activity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ActivityClient) GetX(ctx context.Context, id int) *Activity {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Activity.
func (c *ActivityClient) QueryUser(a *Activity) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(activity.Table, activity.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, activity.UserTable, activity.UserColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryColor queries the color edge of a Activity.
func (c *ActivityClient) QueryColor(a *Activity) *ColorQuery {
	query := &ColorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(activity.Table, activity.FieldID, id),
			sqlgraph.To(color.Table, color.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, activity.ColorTable, activity.ColorColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIcon queries the icon edge of a Activity.
func (c *ActivityClient) QueryIcon(a *Activity) *IconQuery {
	query := &IconQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(activity.Table, activity.FieldID, id),
			sqlgraph.To(icon.Table, icon.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, activity.IconTable, activity.IconColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRecords queries the records edge of a Activity.
func (c *ActivityClient) QueryRecords(a *Activity) *RecordQuery {
	query := &RecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(activity.Table, activity.FieldID, id),
			sqlgraph.To(record.Table, record.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, activity.RecordsTable, activity.RecordsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMeasurements queries the measurements edge of a Activity.
func (c *ActivityClient) QueryMeasurements(a *Activity) *MeasurementQuery {
	query := &MeasurementQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(activity.Table, activity.FieldID, id),
			sqlgraph.To(measurement.Table, measurement.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, activity.MeasurementsTable, activity.MeasurementsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ActivityClient) Hooks() []Hook {
	return c.hooks.Activity
}

// ColorClient is a client for the Color schema.
type ColorClient struct {
	config
}

// NewColorClient returns a client for the Color from the given config.
func NewColorClient(c config) *ColorClient {
	return &ColorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `color.Hooks(f(g(h())))`.
func (c *ColorClient) Use(hooks ...Hook) {
	c.hooks.Color = append(c.hooks.Color, hooks...)
}

// Create returns a create builder for Color.
func (c *ColorClient) Create() *ColorCreate {
	mutation := newColorMutation(c.config, OpCreate)
	return &ColorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Color entities.
func (c *ColorClient) CreateBulk(builders ...*ColorCreate) *ColorCreateBulk {
	return &ColorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Color.
func (c *ColorClient) Update() *ColorUpdate {
	mutation := newColorMutation(c.config, OpUpdate)
	return &ColorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ColorClient) UpdateOne(co *Color) *ColorUpdateOne {
	mutation := newColorMutation(c.config, OpUpdateOne, withColor(co))
	return &ColorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ColorClient) UpdateOneID(id int) *ColorUpdateOne {
	mutation := newColorMutation(c.config, OpUpdateOne, withColorID(id))
	return &ColorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Color.
func (c *ColorClient) Delete() *ColorDelete {
	mutation := newColorMutation(c.config, OpDelete)
	return &ColorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ColorClient) DeleteOne(co *Color) *ColorDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ColorClient) DeleteOneID(id int) *ColorDeleteOne {
	builder := c.Delete().Where(color.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ColorDeleteOne{builder}
}

// Query returns a query builder for Color.
func (c *ColorClient) Query() *ColorQuery {
	return &ColorQuery{config: c.config}
}

// Get returns a Color entity by its id.
func (c *ColorClient) Get(ctx context.Context, id int) (*Color, error) {
	return c.Query().Where(color.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ColorClient) GetX(ctx context.Context, id int) *Color {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryActivities queries the activities edge of a Color.
func (c *ColorClient) QueryActivities(co *Color) *ActivityQuery {
	query := &ActivityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(color.Table, color.FieldID, id),
			sqlgraph.To(activity.Table, activity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, color.ActivitiesTable, color.ActivitiesColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMeasurements queries the measurements edge of a Color.
func (c *ColorClient) QueryMeasurements(co *Color) *MeasurementQuery {
	query := &MeasurementQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(color.Table, color.FieldID, id),
			sqlgraph.To(measurement.Table, measurement.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, color.MeasurementsTable, color.MeasurementsColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ColorClient) Hooks() []Hook {
	return c.hooks.Color
}

// IconClient is a client for the Icon schema.
type IconClient struct {
	config
}

// NewIconClient returns a client for the Icon from the given config.
func NewIconClient(c config) *IconClient {
	return &IconClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `icon.Hooks(f(g(h())))`.
func (c *IconClient) Use(hooks ...Hook) {
	c.hooks.Icon = append(c.hooks.Icon, hooks...)
}

// Create returns a create builder for Icon.
func (c *IconClient) Create() *IconCreate {
	mutation := newIconMutation(c.config, OpCreate)
	return &IconCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Icon entities.
func (c *IconClient) CreateBulk(builders ...*IconCreate) *IconCreateBulk {
	return &IconCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Icon.
func (c *IconClient) Update() *IconUpdate {
	mutation := newIconMutation(c.config, OpUpdate)
	return &IconUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IconClient) UpdateOne(i *Icon) *IconUpdateOne {
	mutation := newIconMutation(c.config, OpUpdateOne, withIcon(i))
	return &IconUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IconClient) UpdateOneID(id int) *IconUpdateOne {
	mutation := newIconMutation(c.config, OpUpdateOne, withIconID(id))
	return &IconUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Icon.
func (c *IconClient) Delete() *IconDelete {
	mutation := newIconMutation(c.config, OpDelete)
	return &IconDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *IconClient) DeleteOne(i *Icon) *IconDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *IconClient) DeleteOneID(id int) *IconDeleteOne {
	builder := c.Delete().Where(icon.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IconDeleteOne{builder}
}

// Query returns a query builder for Icon.
func (c *IconClient) Query() *IconQuery {
	return &IconQuery{config: c.config}
}

// Get returns a Icon entity by its id.
func (c *IconClient) Get(ctx context.Context, id int) (*Icon, error) {
	return c.Query().Where(icon.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IconClient) GetX(ctx context.Context, id int) *Icon {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryActivities queries the activities edge of a Icon.
func (c *IconClient) QueryActivities(i *Icon) *ActivityQuery {
	query := &ActivityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(icon.Table, icon.FieldID, id),
			sqlgraph.To(activity.Table, activity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, icon.ActivitiesTable, icon.ActivitiesColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *IconClient) Hooks() []Hook {
	return c.hooks.Icon
}

// MeasureClient is a client for the Measure schema.
type MeasureClient struct {
	config
}

// NewMeasureClient returns a client for the Measure from the given config.
func NewMeasureClient(c config) *MeasureClient {
	return &MeasureClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `measure.Hooks(f(g(h())))`.
func (c *MeasureClient) Use(hooks ...Hook) {
	c.hooks.Measure = append(c.hooks.Measure, hooks...)
}

// Create returns a create builder for Measure.
func (c *MeasureClient) Create() *MeasureCreate {
	mutation := newMeasureMutation(c.config, OpCreate)
	return &MeasureCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Measure entities.
func (c *MeasureClient) CreateBulk(builders ...*MeasureCreate) *MeasureCreateBulk {
	return &MeasureCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Measure.
func (c *MeasureClient) Update() *MeasureUpdate {
	mutation := newMeasureMutation(c.config, OpUpdate)
	return &MeasureUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MeasureClient) UpdateOne(m *Measure) *MeasureUpdateOne {
	mutation := newMeasureMutation(c.config, OpUpdateOne, withMeasure(m))
	return &MeasureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MeasureClient) UpdateOneID(id int) *MeasureUpdateOne {
	mutation := newMeasureMutation(c.config, OpUpdateOne, withMeasureID(id))
	return &MeasureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Measure.
func (c *MeasureClient) Delete() *MeasureDelete {
	mutation := newMeasureMutation(c.config, OpDelete)
	return &MeasureDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MeasureClient) DeleteOne(m *Measure) *MeasureDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MeasureClient) DeleteOneID(id int) *MeasureDeleteOne {
	builder := c.Delete().Where(measure.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MeasureDeleteOne{builder}
}

// Query returns a query builder for Measure.
func (c *MeasureClient) Query() *MeasureQuery {
	return &MeasureQuery{config: c.config}
}

// Get returns a Measure entity by its id.
func (c *MeasureClient) Get(ctx context.Context, id int) (*Measure, error) {
	return c.Query().Where(measure.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MeasureClient) GetX(ctx context.Context, id int) *Measure {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRecord queries the record edge of a Measure.
func (c *MeasureClient) QueryRecord(m *Measure) *RecordQuery {
	query := &RecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(measure.Table, measure.FieldID, id),
			sqlgraph.To(record.Table, record.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, measure.RecordTable, measure.RecordColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMeasurement queries the measurement edge of a Measure.
func (c *MeasureClient) QueryMeasurement(m *Measure) *MeasurementQuery {
	query := &MeasurementQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(measure.Table, measure.FieldID, id),
			sqlgraph.To(measurement.Table, measurement.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, measure.MeasurementTable, measure.MeasurementColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MeasureClient) Hooks() []Hook {
	return c.hooks.Measure
}

// MeasurementClient is a client for the Measurement schema.
type MeasurementClient struct {
	config
}

// NewMeasurementClient returns a client for the Measurement from the given config.
func NewMeasurementClient(c config) *MeasurementClient {
	return &MeasurementClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `measurement.Hooks(f(g(h())))`.
func (c *MeasurementClient) Use(hooks ...Hook) {
	c.hooks.Measurement = append(c.hooks.Measurement, hooks...)
}

// Create returns a create builder for Measurement.
func (c *MeasurementClient) Create() *MeasurementCreate {
	mutation := newMeasurementMutation(c.config, OpCreate)
	return &MeasurementCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Measurement entities.
func (c *MeasurementClient) CreateBulk(builders ...*MeasurementCreate) *MeasurementCreateBulk {
	return &MeasurementCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Measurement.
func (c *MeasurementClient) Update() *MeasurementUpdate {
	mutation := newMeasurementMutation(c.config, OpUpdate)
	return &MeasurementUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MeasurementClient) UpdateOne(m *Measurement) *MeasurementUpdateOne {
	mutation := newMeasurementMutation(c.config, OpUpdateOne, withMeasurement(m))
	return &MeasurementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MeasurementClient) UpdateOneID(id int) *MeasurementUpdateOne {
	mutation := newMeasurementMutation(c.config, OpUpdateOne, withMeasurementID(id))
	return &MeasurementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Measurement.
func (c *MeasurementClient) Delete() *MeasurementDelete {
	mutation := newMeasurementMutation(c.config, OpDelete)
	return &MeasurementDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MeasurementClient) DeleteOne(m *Measurement) *MeasurementDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MeasurementClient) DeleteOneID(id int) *MeasurementDeleteOne {
	builder := c.Delete().Where(measurement.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MeasurementDeleteOne{builder}
}

// Query returns a query builder for Measurement.
func (c *MeasurementClient) Query() *MeasurementQuery {
	return &MeasurementQuery{config: c.config}
}

// Get returns a Measurement entity by its id.
func (c *MeasurementClient) Get(ctx context.Context, id int) (*Measurement, error) {
	return c.Query().Where(measurement.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MeasurementClient) GetX(ctx context.Context, id int) *Measurement {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Measurement.
func (c *MeasurementClient) QueryUser(m *Measurement) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(measurement.Table, measurement.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, measurement.UserTable, measurement.UserColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryColor queries the color edge of a Measurement.
func (c *MeasurementClient) QueryColor(m *Measurement) *ColorQuery {
	query := &ColorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(measurement.Table, measurement.FieldID, id),
			sqlgraph.To(color.Table, color.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, measurement.ColorTable, measurement.ColorColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryActivities queries the activities edge of a Measurement.
func (c *MeasurementClient) QueryActivities(m *Measurement) *ActivityQuery {
	query := &ActivityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(measurement.Table, measurement.FieldID, id),
			sqlgraph.To(activity.Table, activity.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, measurement.ActivitiesTable, measurement.ActivitiesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMeasures queries the measures edge of a Measurement.
func (c *MeasurementClient) QueryMeasures(m *Measurement) *MeasureQuery {
	query := &MeasureQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(measurement.Table, measurement.FieldID, id),
			sqlgraph.To(measure.Table, measure.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, measurement.MeasuresTable, measurement.MeasuresColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MeasurementClient) Hooks() []Hook {
	return c.hooks.Measurement
}

// RecordClient is a client for the Record schema.
type RecordClient struct {
	config
}

// NewRecordClient returns a client for the Record from the given config.
func NewRecordClient(c config) *RecordClient {
	return &RecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `record.Hooks(f(g(h())))`.
func (c *RecordClient) Use(hooks ...Hook) {
	c.hooks.Record = append(c.hooks.Record, hooks...)
}

// Create returns a create builder for Record.
func (c *RecordClient) Create() *RecordCreate {
	mutation := newRecordMutation(c.config, OpCreate)
	return &RecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Record entities.
func (c *RecordClient) CreateBulk(builders ...*RecordCreate) *RecordCreateBulk {
	return &RecordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Record.
func (c *RecordClient) Update() *RecordUpdate {
	mutation := newRecordMutation(c.config, OpUpdate)
	return &RecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RecordClient) UpdateOne(r *Record) *RecordUpdateOne {
	mutation := newRecordMutation(c.config, OpUpdateOne, withRecord(r))
	return &RecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RecordClient) UpdateOneID(id int) *RecordUpdateOne {
	mutation := newRecordMutation(c.config, OpUpdateOne, withRecordID(id))
	return &RecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Record.
func (c *RecordClient) Delete() *RecordDelete {
	mutation := newRecordMutation(c.config, OpDelete)
	return &RecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RecordClient) DeleteOne(r *Record) *RecordDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RecordClient) DeleteOneID(id int) *RecordDeleteOne {
	builder := c.Delete().Where(record.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RecordDeleteOne{builder}
}

// Query returns a query builder for Record.
func (c *RecordClient) Query() *RecordQuery {
	return &RecordQuery{config: c.config}
}

// Get returns a Record entity by its id.
func (c *RecordClient) Get(ctx context.Context, id int) (*Record, error) {
	return c.Query().Where(record.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RecordClient) GetX(ctx context.Context, id int) *Record {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryActivity queries the activity edge of a Record.
func (c *RecordClient) QueryActivity(r *Record) *ActivityQuery {
	query := &ActivityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(record.Table, record.FieldID, id),
			sqlgraph.To(activity.Table, activity.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, record.ActivityTable, record.ActivityColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMeasures queries the measures edge of a Record.
func (c *RecordClient) QueryMeasures(r *Record) *MeasureQuery {
	query := &MeasureQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(record.Table, record.FieldID, id),
			sqlgraph.To(measure.Table, measure.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, record.MeasuresTable, record.MeasuresColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RecordClient) Hooks() []Hook {
	return c.hooks.Record
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMeasurements queries the measurements edge of a User.
func (c *UserClient) QueryMeasurements(u *User) *MeasurementQuery {
	query := &MeasurementQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(measurement.Table, measurement.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.MeasurementsTable, user.MeasurementsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryActivities queries the activities edge of a User.
func (c *UserClient) QueryActivities(u *User) *ActivityQuery {
	query := &ActivityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(activity.Table, activity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ActivitiesTable, user.ActivitiesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
