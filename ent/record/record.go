// Code generated by entc, DO NOT EDIT.

package record

const (
	// Label holds the string label denoting the record type in the database.
	Label = "record"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStart holds the string denoting the start field in the database.
	FieldStart = "start"
	// FieldEnd holds the string denoting the end field in the database.
	FieldEnd = "end"

	// EdgeActivity holds the string denoting the activity edge name in mutations.
	EdgeActivity = "activity"
	// EdgeMeasures holds the string denoting the measures edge name in mutations.
	EdgeMeasures = "measures"

	// Table holds the table name of the record in the database.
	Table = "records"
	// ActivityTable is the table the holds the activity relation/edge.
	ActivityTable = "records"
	// ActivityInverseTable is the table name for the Activity entity.
	// It exists in this package in order to avoid circular dependency with the "activity" package.
	ActivityInverseTable = "activities"
	// ActivityColumn is the table column denoting the activity relation/edge.
	ActivityColumn = "activity_records"
	// MeasuresTable is the table the holds the measures relation/edge.
	MeasuresTable = "measures"
	// MeasuresInverseTable is the table name for the Measure entity.
	// It exists in this package in order to avoid circular dependency with the "measure" package.
	MeasuresInverseTable = "measures"
	// MeasuresColumn is the table column denoting the measures relation/edge.
	MeasuresColumn = "record_measures"
)

// Columns holds all SQL columns for record fields.
var Columns = []string{
	FieldID,
	FieldStart,
	FieldEnd,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Record type.
var ForeignKeys = []string{
	"activity_records",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
