// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/vmkevv/suprat-api/ent/measure"
	"github.com/vmkevv/suprat-api/ent/measurement"
	"github.com/vmkevv/suprat-api/ent/record"
)

// MeasureCreate is the builder for creating a Measure entity.
type MeasureCreate struct {
	config
	mutation *MeasureMutation
	hooks    []Hook
}

// SetQuantity sets the quantity field.
func (mc *MeasureCreate) SetQuantity(i int) *MeasureCreate {
	mc.mutation.SetQuantity(i)
	return mc
}

// SetRecordID sets the record edge to Record by id.
func (mc *MeasureCreate) SetRecordID(id int) *MeasureCreate {
	mc.mutation.SetRecordID(id)
	return mc
}

// SetRecord sets the record edge to Record.
func (mc *MeasureCreate) SetRecord(r *Record) *MeasureCreate {
	return mc.SetRecordID(r.ID)
}

// SetMeasurementID sets the measurement edge to Measurement by id.
func (mc *MeasureCreate) SetMeasurementID(id int) *MeasureCreate {
	mc.mutation.SetMeasurementID(id)
	return mc
}

// SetMeasurement sets the measurement edge to Measurement.
func (mc *MeasureCreate) SetMeasurement(m *Measurement) *MeasureCreate {
	return mc.SetMeasurementID(m.ID)
}

// Mutation returns the MeasureMutation object of the builder.
func (mc *MeasureCreate) Mutation() *MeasureMutation {
	return mc.mutation
}

// Save creates the Measure in the database.
func (mc *MeasureCreate) Save(ctx context.Context) (*Measure, error) {
	var (
		err  error
		node *Measure
	)
	if len(mc.hooks) == 0 {
		if err = mc.check(); err != nil {
			return nil, err
		}
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MeasureMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mc.check(); err != nil {
				return nil, err
			}
			mc.mutation = mutation
			node, err = mc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			mut = mc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MeasureCreate) SaveX(ctx context.Context) *Measure {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (mc *MeasureCreate) check() error {
	if _, ok := mc.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New("ent: missing required field \"quantity\"")}
	}
	if _, ok := mc.mutation.RecordID(); !ok {
		return &ValidationError{Name: "record", err: errors.New("ent: missing required edge \"record\"")}
	}
	if _, ok := mc.mutation.MeasurementID(); !ok {
		return &ValidationError{Name: "measurement", err: errors.New("ent: missing required edge \"measurement\"")}
	}
	return nil
}

func (mc *MeasureCreate) sqlSave(ctx context.Context) (*Measure, error) {
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (mc *MeasureCreate) createSpec() (*Measure, *sqlgraph.CreateSpec) {
	var (
		_node = &Measure{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: measure.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: measure.FieldID,
			},
		}
	)
	if value, ok := mc.mutation.Quantity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: measure.FieldQuantity,
		})
		_node.Quantity = value
	}
	if nodes := mc.mutation.RecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   measure.RecordTable,
			Columns: []string{measure.RecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: record.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.MeasurementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   measure.MeasurementTable,
			Columns: []string{measure.MeasurementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: measurement.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MeasureCreateBulk is the builder for creating a bulk of Measure entities.
type MeasureCreateBulk struct {
	config
	builders []*MeasureCreate
}

// Save creates the Measure entities in the database.
func (mcb *MeasureCreateBulk) Save(ctx context.Context) ([]*Measure, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Measure, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MeasureMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (mcb *MeasureCreateBulk) SaveX(ctx context.Context) []*Measure {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
