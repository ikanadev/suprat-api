// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/vmkevv/suprat-api/ent/activity"
	"github.com/vmkevv/suprat-api/ent/color"
	"github.com/vmkevv/suprat-api/ent/icon"
	"github.com/vmkevv/suprat-api/ent/measurement"
	"github.com/vmkevv/suprat-api/ent/predicate"
	"github.com/vmkevv/suprat-api/ent/record"
	"github.com/vmkevv/suprat-api/ent/user"
)

// ActivityUpdate is the builder for updating Activity entities.
type ActivityUpdate struct {
	config
	hooks    []Hook
	mutation *ActivityMutation
}

// Where adds a new predicate for the builder.
func (au *ActivityUpdate) Where(ps ...predicate.Activity) *ActivityUpdate {
	au.mutation.predicates = append(au.mutation.predicates, ps...)
	return au
}

// SetName sets the name field.
func (au *ActivityUpdate) SetName(s string) *ActivityUpdate {
	au.mutation.SetName(s)
	return au
}

// SetCreatedAt sets the created_at field.
func (au *ActivityUpdate) SetCreatedAt(t time.Time) *ActivityUpdate {
	au.mutation.SetCreatedAt(t)
	return au
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (au *ActivityUpdate) SetNillableCreatedAt(t *time.Time) *ActivityUpdate {
	if t != nil {
		au.SetCreatedAt(*t)
	}
	return au
}

// SetUserID sets the user edge to User by id.
func (au *ActivityUpdate) SetUserID(id int) *ActivityUpdate {
	au.mutation.SetUserID(id)
	return au
}

// SetUser sets the user edge to User.
func (au *ActivityUpdate) SetUser(u *User) *ActivityUpdate {
	return au.SetUserID(u.ID)
}

// SetColorID sets the color edge to Color by id.
func (au *ActivityUpdate) SetColorID(id int) *ActivityUpdate {
	au.mutation.SetColorID(id)
	return au
}

// SetColor sets the color edge to Color.
func (au *ActivityUpdate) SetColor(c *Color) *ActivityUpdate {
	return au.SetColorID(c.ID)
}

// SetIconID sets the icon edge to Icon by id.
func (au *ActivityUpdate) SetIconID(id int) *ActivityUpdate {
	au.mutation.SetIconID(id)
	return au
}

// SetIcon sets the icon edge to Icon.
func (au *ActivityUpdate) SetIcon(i *Icon) *ActivityUpdate {
	return au.SetIconID(i.ID)
}

// AddRecordIDs adds the records edge to Record by ids.
func (au *ActivityUpdate) AddRecordIDs(ids ...int) *ActivityUpdate {
	au.mutation.AddRecordIDs(ids...)
	return au
}

// AddRecords adds the records edges to Record.
func (au *ActivityUpdate) AddRecords(r ...*Record) *ActivityUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddRecordIDs(ids...)
}

// AddMeasurementIDs adds the measurements edge to Measurement by ids.
func (au *ActivityUpdate) AddMeasurementIDs(ids ...int) *ActivityUpdate {
	au.mutation.AddMeasurementIDs(ids...)
	return au
}

// AddMeasurements adds the measurements edges to Measurement.
func (au *ActivityUpdate) AddMeasurements(m ...*Measurement) *ActivityUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return au.AddMeasurementIDs(ids...)
}

// Mutation returns the ActivityMutation object of the builder.
func (au *ActivityUpdate) Mutation() *ActivityMutation {
	return au.mutation
}

// ClearUser clears the "user" edge to type User.
func (au *ActivityUpdate) ClearUser() *ActivityUpdate {
	au.mutation.ClearUser()
	return au
}

// ClearColor clears the "color" edge to type Color.
func (au *ActivityUpdate) ClearColor() *ActivityUpdate {
	au.mutation.ClearColor()
	return au
}

// ClearIcon clears the "icon" edge to type Icon.
func (au *ActivityUpdate) ClearIcon() *ActivityUpdate {
	au.mutation.ClearIcon()
	return au
}

// ClearRecords clears all "records" edges to type Record.
func (au *ActivityUpdate) ClearRecords() *ActivityUpdate {
	au.mutation.ClearRecords()
	return au
}

// RemoveRecordIDs removes the records edge to Record by ids.
func (au *ActivityUpdate) RemoveRecordIDs(ids ...int) *ActivityUpdate {
	au.mutation.RemoveRecordIDs(ids...)
	return au
}

// RemoveRecords removes records edges to Record.
func (au *ActivityUpdate) RemoveRecords(r ...*Record) *ActivityUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveRecordIDs(ids...)
}

// ClearMeasurements clears all "measurements" edges to type Measurement.
func (au *ActivityUpdate) ClearMeasurements() *ActivityUpdate {
	au.mutation.ClearMeasurements()
	return au
}

// RemoveMeasurementIDs removes the measurements edge to Measurement by ids.
func (au *ActivityUpdate) RemoveMeasurementIDs(ids ...int) *ActivityUpdate {
	au.mutation.RemoveMeasurementIDs(ids...)
	return au
}

// RemoveMeasurements removes measurements edges to Measurement.
func (au *ActivityUpdate) RemoveMeasurements(m ...*Measurement) *ActivityUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return au.RemoveMeasurementIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ActivityUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		if err = au.check(); err != nil {
			return 0, err
		}
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActivityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = au.check(); err != nil {
				return 0, err
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *ActivityUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ActivityUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ActivityUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *ActivityUpdate) check() error {
	if _, ok := au.mutation.UserID(); au.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	if _, ok := au.mutation.ColorID(); au.mutation.ColorCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"color\"")
	}
	if _, ok := au.mutation.IconID(); au.mutation.IconCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"icon\"")
	}
	return nil
}

func (au *ActivityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   activity.Table,
			Columns: activity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: activity.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldName,
		})
	}
	if value, ok := au.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldCreatedAt,
		})
	}
	if au.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.UserTable,
			Columns: []string{activity.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.UserTable,
			Columns: []string{activity.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ColorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.ColorTable,
			Columns: []string{activity.ColorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: color.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ColorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.ColorTable,
			Columns: []string{activity.ColorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: color.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.IconCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.IconTable,
			Columns: []string{activity.IconColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: icon.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.IconIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.IconTable,
			Columns: []string{activity.IconColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: icon.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activity.RecordsTable,
			Columns: []string{activity.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: record.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedRecordsIDs(); len(nodes) > 0 && !au.mutation.RecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activity.RecordsTable,
			Columns: []string{activity.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: record.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activity.RecordsTable,
			Columns: []string{activity.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: record.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.MeasurementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   activity.MeasurementsTable,
			Columns: activity.MeasurementsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: measurement.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedMeasurementsIDs(); len(nodes) > 0 && !au.mutation.MeasurementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   activity.MeasurementsTable,
			Columns: activity.MeasurementsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: measurement.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.MeasurementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   activity.MeasurementsTable,
			Columns: activity.MeasurementsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: measurement.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activity.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ActivityUpdateOne is the builder for updating a single Activity entity.
type ActivityUpdateOne struct {
	config
	hooks    []Hook
	mutation *ActivityMutation
}

// SetName sets the name field.
func (auo *ActivityUpdateOne) SetName(s string) *ActivityUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetCreatedAt sets the created_at field.
func (auo *ActivityUpdateOne) SetCreatedAt(t time.Time) *ActivityUpdateOne {
	auo.mutation.SetCreatedAt(t)
	return auo
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableCreatedAt(t *time.Time) *ActivityUpdateOne {
	if t != nil {
		auo.SetCreatedAt(*t)
	}
	return auo
}

// SetUserID sets the user edge to User by id.
func (auo *ActivityUpdateOne) SetUserID(id int) *ActivityUpdateOne {
	auo.mutation.SetUserID(id)
	return auo
}

// SetUser sets the user edge to User.
func (auo *ActivityUpdateOne) SetUser(u *User) *ActivityUpdateOne {
	return auo.SetUserID(u.ID)
}

// SetColorID sets the color edge to Color by id.
func (auo *ActivityUpdateOne) SetColorID(id int) *ActivityUpdateOne {
	auo.mutation.SetColorID(id)
	return auo
}

// SetColor sets the color edge to Color.
func (auo *ActivityUpdateOne) SetColor(c *Color) *ActivityUpdateOne {
	return auo.SetColorID(c.ID)
}

// SetIconID sets the icon edge to Icon by id.
func (auo *ActivityUpdateOne) SetIconID(id int) *ActivityUpdateOne {
	auo.mutation.SetIconID(id)
	return auo
}

// SetIcon sets the icon edge to Icon.
func (auo *ActivityUpdateOne) SetIcon(i *Icon) *ActivityUpdateOne {
	return auo.SetIconID(i.ID)
}

// AddRecordIDs adds the records edge to Record by ids.
func (auo *ActivityUpdateOne) AddRecordIDs(ids ...int) *ActivityUpdateOne {
	auo.mutation.AddRecordIDs(ids...)
	return auo
}

// AddRecords adds the records edges to Record.
func (auo *ActivityUpdateOne) AddRecords(r ...*Record) *ActivityUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddRecordIDs(ids...)
}

// AddMeasurementIDs adds the measurements edge to Measurement by ids.
func (auo *ActivityUpdateOne) AddMeasurementIDs(ids ...int) *ActivityUpdateOne {
	auo.mutation.AddMeasurementIDs(ids...)
	return auo
}

// AddMeasurements adds the measurements edges to Measurement.
func (auo *ActivityUpdateOne) AddMeasurements(m ...*Measurement) *ActivityUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return auo.AddMeasurementIDs(ids...)
}

// Mutation returns the ActivityMutation object of the builder.
func (auo *ActivityUpdateOne) Mutation() *ActivityMutation {
	return auo.mutation
}

// ClearUser clears the "user" edge to type User.
func (auo *ActivityUpdateOne) ClearUser() *ActivityUpdateOne {
	auo.mutation.ClearUser()
	return auo
}

// ClearColor clears the "color" edge to type Color.
func (auo *ActivityUpdateOne) ClearColor() *ActivityUpdateOne {
	auo.mutation.ClearColor()
	return auo
}

// ClearIcon clears the "icon" edge to type Icon.
func (auo *ActivityUpdateOne) ClearIcon() *ActivityUpdateOne {
	auo.mutation.ClearIcon()
	return auo
}

// ClearRecords clears all "records" edges to type Record.
func (auo *ActivityUpdateOne) ClearRecords() *ActivityUpdateOne {
	auo.mutation.ClearRecords()
	return auo
}

// RemoveRecordIDs removes the records edge to Record by ids.
func (auo *ActivityUpdateOne) RemoveRecordIDs(ids ...int) *ActivityUpdateOne {
	auo.mutation.RemoveRecordIDs(ids...)
	return auo
}

// RemoveRecords removes records edges to Record.
func (auo *ActivityUpdateOne) RemoveRecords(r ...*Record) *ActivityUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveRecordIDs(ids...)
}

// ClearMeasurements clears all "measurements" edges to type Measurement.
func (auo *ActivityUpdateOne) ClearMeasurements() *ActivityUpdateOne {
	auo.mutation.ClearMeasurements()
	return auo
}

// RemoveMeasurementIDs removes the measurements edge to Measurement by ids.
func (auo *ActivityUpdateOne) RemoveMeasurementIDs(ids ...int) *ActivityUpdateOne {
	auo.mutation.RemoveMeasurementIDs(ids...)
	return auo
}

// RemoveMeasurements removes measurements edges to Measurement.
func (auo *ActivityUpdateOne) RemoveMeasurements(m ...*Measurement) *ActivityUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return auo.RemoveMeasurementIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (auo *ActivityUpdateOne) Save(ctx context.Context) (*Activity, error) {
	var (
		err  error
		node *Activity
	)
	if len(auo.hooks) == 0 {
		if err = auo.check(); err != nil {
			return nil, err
		}
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActivityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auo.check(); err != nil {
				return nil, err
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ActivityUpdateOne) SaveX(ctx context.Context) *Activity {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ActivityUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ActivityUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *ActivityUpdateOne) check() error {
	if _, ok := auo.mutation.UserID(); auo.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	if _, ok := auo.mutation.ColorID(); auo.mutation.ColorCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"color\"")
	}
	if _, ok := auo.mutation.IconID(); auo.mutation.IconCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"icon\"")
	}
	return nil
}

func (auo *ActivityUpdateOne) sqlSave(ctx context.Context) (_node *Activity, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   activity.Table,
			Columns: activity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: activity.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Activity.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := auo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldName,
		})
	}
	if value, ok := auo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldCreatedAt,
		})
	}
	if auo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.UserTable,
			Columns: []string{activity.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.UserTable,
			Columns: []string{activity.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ColorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.ColorTable,
			Columns: []string{activity.ColorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: color.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ColorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.ColorTable,
			Columns: []string{activity.ColorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: color.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.IconCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.IconTable,
			Columns: []string{activity.IconColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: icon.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.IconIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.IconTable,
			Columns: []string{activity.IconColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: icon.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activity.RecordsTable,
			Columns: []string{activity.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: record.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedRecordsIDs(); len(nodes) > 0 && !auo.mutation.RecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activity.RecordsTable,
			Columns: []string{activity.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: record.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activity.RecordsTable,
			Columns: []string{activity.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: record.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.MeasurementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   activity.MeasurementsTable,
			Columns: activity.MeasurementsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: measurement.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedMeasurementsIDs(); len(nodes) > 0 && !auo.mutation.MeasurementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   activity.MeasurementsTable,
			Columns: activity.MeasurementsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: measurement.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.MeasurementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   activity.MeasurementsTable,
			Columns: activity.MeasurementsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: measurement.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Activity{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activity.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
