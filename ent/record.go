// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/vmkevv/suprat-api/ent/activity"
	"github.com/vmkevv/suprat-api/ent/record"
)

// Record is the model entity for the Record schema.
type Record struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Start holds the value of the "start" field.
	Start time.Time `json:"start,omitempty"`
	// End holds the value of the "end" field.
	End time.Time `json:"end,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RecordQuery when eager-loading is set.
	Edges            RecordEdges `json:"edges"`
	activity_records *int
}

// RecordEdges holds the relations/edges for other nodes in the graph.
type RecordEdges struct {
	// Activity holds the value of the activity edge.
	Activity *Activity
	// Measures holds the value of the measures edge.
	Measures []*Measure
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ActivityOrErr returns the Activity value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RecordEdges) ActivityOrErr() (*Activity, error) {
	if e.loadedTypes[0] {
		if e.Activity == nil {
			// The edge activity was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: activity.Label}
		}
		return e.Activity, nil
	}
	return nil, &NotLoadedError{edge: "activity"}
}

// MeasuresOrErr returns the Measures value or an error if the edge
// was not loaded in eager-loading.
func (e RecordEdges) MeasuresOrErr() ([]*Measure, error) {
	if e.loadedTypes[1] {
		return e.Measures, nil
	}
	return nil, &NotLoadedError{edge: "measures"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Record) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullTime{},  // start
		&sql.NullTime{},  // end
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Record) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // activity_records
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Record fields.
func (r *Record) assignValues(values ...interface{}) error {
	if m, n := len(values), len(record.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	r.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field start", values[0])
	} else if value.Valid {
		r.Start = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field end", values[1])
	} else if value.Valid {
		r.End = value.Time
	}
	values = values[2:]
	if len(values) == len(record.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field activity_records", value)
		} else if value.Valid {
			r.activity_records = new(int)
			*r.activity_records = int(value.Int64)
		}
	}
	return nil
}

// QueryActivity queries the activity edge of the Record.
func (r *Record) QueryActivity() *ActivityQuery {
	return (&RecordClient{config: r.config}).QueryActivity(r)
}

// QueryMeasures queries the measures edge of the Record.
func (r *Record) QueryMeasures() *MeasureQuery {
	return (&RecordClient{config: r.config}).QueryMeasures(r)
}

// Update returns a builder for updating this Record.
// Note that, you need to call Record.Unwrap() before calling this method, if this Record
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Record) Update() *RecordUpdateOne {
	return (&RecordClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (r *Record) Unwrap() *Record {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Record is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Record) String() string {
	var builder strings.Builder
	builder.WriteString("Record(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", start=")
	builder.WriteString(r.Start.Format(time.ANSIC))
	builder.WriteString(", end=")
	builder.WriteString(r.End.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Records is a parsable slice of Record.
type Records []*Record

func (r Records) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
