// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/vmkevv/suprat-api/ent/color"
)

// Color is the model entity for the Color schema.
type Color struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Rgb holds the value of the "rgb" field.
	Rgb string `json:"rgb,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ColorQuery when eager-loading is set.
	Edges ColorEdges `json:"edges"`
}

// ColorEdges holds the relations/edges for other nodes in the graph.
type ColorEdges struct {
	// Activities holds the value of the activities edge.
	Activities []*Activity
	// Measurements holds the value of the measurements edge.
	Measurements []*Measurement
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ActivitiesOrErr returns the Activities value or an error if the edge
// was not loaded in eager-loading.
func (e ColorEdges) ActivitiesOrErr() ([]*Activity, error) {
	if e.loadedTypes[0] {
		return e.Activities, nil
	}
	return nil, &NotLoadedError{edge: "activities"}
}

// MeasurementsOrErr returns the Measurements value or an error if the edge
// was not loaded in eager-loading.
func (e ColorEdges) MeasurementsOrErr() ([]*Measurement, error) {
	if e.loadedTypes[1] {
		return e.Measurements, nil
	}
	return nil, &NotLoadedError{edge: "measurements"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Color) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullString{}, // rgb
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Color fields.
func (c *Color) assignValues(values ...interface{}) error {
	if m, n := len(values), len(color.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	c.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		c.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field rgb", values[1])
	} else if value.Valid {
		c.Rgb = value.String
	}
	return nil
}

// QueryActivities queries the activities edge of the Color.
func (c *Color) QueryActivities() *ActivityQuery {
	return (&ColorClient{config: c.config}).QueryActivities(c)
}

// QueryMeasurements queries the measurements edge of the Color.
func (c *Color) QueryMeasurements() *MeasurementQuery {
	return (&ColorClient{config: c.config}).QueryMeasurements(c)
}

// Update returns a builder for updating this Color.
// Note that, you need to call Color.Unwrap() before calling this method, if this Color
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Color) Update() *ColorUpdateOne {
	return (&ColorClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (c *Color) Unwrap() *Color {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Color is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Color) String() string {
	var builder strings.Builder
	builder.WriteString("Color(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", name=")
	builder.WriteString(c.Name)
	builder.WriteString(", rgb=")
	builder.WriteString(c.Rgb)
	builder.WriteByte(')')
	return builder.String()
}

// Colors is a parsable slice of Color.
type Colors []*Color

func (c Colors) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
